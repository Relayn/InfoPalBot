"""–ú–æ–¥—É–ª—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è APScheduler
–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, —Ç–∞–∫–∏—Ö –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º.
–û–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ
–¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö API, —Ç–∞–∫ –∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

–ó–∞–¥–∞—á–∏:
- `format_weather_message`: –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ.
- `format_news_message`: –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö.
- `format_events_message`: –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö.
- `send_single_notification`: –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É,
  —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
"""
import html
import logging
from typing import Optional

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError
from sqlmodel import select

from app.api_clients.events import get_kudago_events
from app.api_clients.news import get_top_headlines
from app.api_clients.weather import get_weather_data
from app.bot.constants import (
    EVENTS_CATEGORIES,
    INFO_TYPE_EVENTS,
    INFO_TYPE_NEWS,
    INFO_TYPE_WEATHER,
    KUDAGO_LOCATION_SLUGS,
    NEWS_CATEGORIES,
)
from app.database.crud import delete_subscription
from app.database.models import Subscription
from app.database.session import get_session

logger = logging.getLogger(__name__)


async def format_weather_message(details: str) -> Optional[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã.

    Args:
        details: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã.

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    weather_data = await get_weather_data(details)
    if not weather_data or weather_data.get("error"):
        logger.warning(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{details}' –≤ –∑–∞–¥–∞—á–µ."
        )
        return None

    try:
        description = weather_data["weather"][0]["description"].capitalize()
        temp = weather_data["main"]["temp"]
        feels_like = weather_data["main"]["feels_like"]
        city_name = weather_data.get("name", details)
        return (
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {html.escape(city_name)}:</b>\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
    except (KeyError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{details}': {e}", exc_info=True)
        return None


async def format_news_message(category: Optional[str] = None) -> Optional[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏.

    Args:
        category: Slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'sports').

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    articles = await get_top_headlines(category=category, page_size=5)
    if not isinstance(articles, list) or not articles:
        logger.warning(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –≤ –∑–∞–¥–∞—á–µ."
        )
        return None

    category_display_name = NEWS_CATEGORIES.get(category)
    category_header = f" ({category_display_name})" if category_display_name else ""
    response_lines = [f"<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–°–®–ê){category_header}:</b>"]

    for i, article in enumerate(articles):
        title = html.escape(article.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
        url = article.get("url", "#")
        response_lines.append(f"{i + 1}. <a href='{url}'>{title}</a>")
    return "\n".join(response_lines)


async def format_events_message(
    location_slug: str, category: Optional[str] = None
) -> Optional[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏.

    Args:
        location_slug: Slug –≥–æ—Ä–æ–¥–∞ –¥–ª—è KudaGo API (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'msk').
        category: Slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'concert').

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    events = await get_kudago_events(
        location=location_slug, categories=category, page_size=3
    )
    if not isinstance(events, list) or not events:
        logger.warning(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è '{location_slug}' "
            f"(–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}) –≤ –∑–∞–¥–∞—á–µ."
        )
        return None

    city_display_name = next(
        (
            name.capitalize()
            for name, slug in KUDAGO_LOCATION_SLUGS.items()
            if slug == location_slug
        ),
        location_slug,
    )
    category_display_name = EVENTS_CATEGORIES.get(category)
    category_header = f" ({category_display_name})" if category_display_name else ""
    response_lines = [
        f"<b>üéâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {html.escape(city_display_name)}"
        f"{category_header}:</b>"
    ]

    for i, event in enumerate(events):
        title = html.escape(event.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
        site_url = event.get("site_url", "#")
        response_lines.append(f"{i + 1}. <a href='{site_url}'>{title}</a>")
    return "\n\n".join(response_lines)


async def _get_formatted_message_for_subscription(
    subscription: Subscription,
) -> Optional[str]:
    """–í—ã–±–∏—Ä–∞–µ—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        subscription: –û–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Returns:
        –ì–æ—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.
    """
    if subscription.info_type == INFO_TYPE_WEATHER:
        return await format_weather_message(subscription.details)
    if subscription.info_type == INFO_TYPE_NEWS:
        return await format_news_message(category=subscription.category)
    if subscription.info_type == INFO_TYPE_EVENTS:
        return await format_events_message(
            location_slug=subscription.details, category=subscription.category
        )
    return None


def _handle_user_blocking_error(session, user):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        session: –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.
    """
    logger.warning(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. "
        "–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏."
    )
    user_subscriptions = session.exec(
        select(Subscription).where(Subscription.user_id == user.id)
    ).all()
    for sub in user_subscriptions:
        delete_subscription(session, sub.id)
    logger.info(f"–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")


async def send_single_notification(bot: Bot, subscription_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID –ø–æ–¥–ø–∏—Å–∫–∏.

    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º. –û–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ
    –¥–∞–Ω–Ω—ã—Ö, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä `aiogram.Bot` –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        subscription_id: ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π
            –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID: {subscription_id}")

    with get_session() as session:
        subscription = session.get(Subscription, subscription_id)

        if not subscription or subscription.status != "active":
            logger.warning(
                f"–ü–æ–¥–ø–∏—Å–∫–∞ ID {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. "
                "–ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞."
            )
            return

        user = subscription.user
        if not user:
            logger.error(
                f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {subscription_id}."
            )
            return

        message_text = await _get_formatted_message_for_subscription(subscription)
        if not message_text:
            logger.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {subscription_id}. "
                "–ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏."
            )
            return

        try:
            await bot.send_message(
                chat_id=user.telegram_id,
                text=message_text,
                disable_web_page_preview=True,
            )
            logger.info(
                f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ID {subscription_id} "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}."
            )
        except TelegramAPIError as e:
            if "bot was blocked by the user" in e.message or "user is deactivated" in e.message:
                _handle_user_blocking_error(session, user)
            else:
                logger.error(
                    f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ "
                    f"ID {subscription_id}: {e}",
                    exc_info=True,
                )
        except Exception as e:
            logger.error(
                f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ "
                f"ID {subscription_id}: {e}",
                exc_info=True,
            )