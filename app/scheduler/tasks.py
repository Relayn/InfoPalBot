# –§–∞–π–ª: app/scheduler/tasks.py

import logging
import html
from typing import Optional

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError
from sqlmodel import Session, select

from app.api_clients.events import get_kudago_events
from app.api_clients.news import get_top_headlines
from app.api_clients.weather import get_weather_data
from app.bot.constants import INFO_TYPE_WEATHER, INFO_TYPE_NEWS, INFO_TYPE_EVENTS, KUDAGO_LOCATION_SLUGS
from app.database.crud import delete_subscription
from app.database.models import Subscription, User
from app.database.session import get_session

logger = logging.getLogger(__name__)


async def format_weather_message(details: str) -> Optional[str]:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    weather_data = await get_weather_data(details)
    if not weather_data or weather_data.get("error"):
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{details}' –≤ –∑–∞–¥–∞—á–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
        return None

    try:
        description = weather_data["weather"][0]["description"].capitalize()
        temp = weather_data["main"]["temp"]
        feels_like = weather_data["main"]["feels_like"]
        city_name = weather_data.get("name", details)
        return (
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {html.escape(city_name)}:</b>\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
    except (KeyError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{details}': {e}", exc_info=True)
        return None


async def format_news_message() -> Optional[str]:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    articles = await get_top_headlines(page_size=5)
    if not isinstance(articles, list) or not articles:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∑–∞–¥–∞—á–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
        return None

    response_lines = ["<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–°–®–ê):</b>"]
    for i, article in enumerate(articles):
        title = html.escape(article.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
        url = article.get("url", "#")
        response_lines.append(f"{i + 1}. <a href='{url}'>{title}</a>")
    return "\n".join(response_lines)


async def format_events_message(location_slug: str) -> Optional[str]:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    events = await get_kudago_events(location=location_slug, page_size=3)
    if not isinstance(events, list) or not events:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è '{location_slug}' –≤ –∑–∞–¥–∞—á–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
        return None

    city_display_name = next((name.capitalize() for name, slug in KUDAGO_LOCATION_SLUGS.items() if slug == location_slug), location_slug)
    response_lines = [f"<b>üéâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {html.escape(city_display_name)}:</b>"]
    for i, event in enumerate(events):
        title = html.escape(event.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
        site_url = event.get("site_url", "#")
        response_lines.append(f"{i + 1}. <a href='{site_url}'>{title}</a>")
    return "\n\n".join(response_lines)


async def send_single_notification(bot: Bot, subscription_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID: {subscription_id}")
    message_text: Optional[str] = None

    with get_session() as session:
        subscription = session.get(Subscription, subscription_id)

        if not subscription or subscription.status != "active":
            logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ ID {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return

        # –ò–ó–ú–ï–ù–ï–ù–û: –Ø–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
        user = subscription.user
        if not user:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {subscription_id}.")
            return

        if subscription.info_type == INFO_TYPE_WEATHER:
            message_text = await format_weather_message(subscription.details)
        elif subscription.info_type == INFO_TYPE_NEWS:
            message_text = await format_news_message()
        elif subscription.info_type == INFO_TYPE_EVENTS:
            message_text = await format_events_message(subscription.details)

        if not message_text:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {subscription_id}. –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        try:
            # –ò–ó–ú–ï–ù–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º user.telegram_id
            await bot.send_message(
                chat_id=user.telegram_id,
                text=message_text,
                disable_web_page_preview=True
            )
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ID {subscription_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}.")
        except TelegramAPIError as e:
            if "bot was blocked by the user" in e.message or "user is deactivated" in e.message:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏.")
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_subscriptions = session.exec(select(Subscription).where(Subscription.user_id == user.id)).all()
                for sub in user_subscriptions:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    delete_subscription(session, sub.id)
                logger.info(f"–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")
            else:
                logger.error(
                    f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ID {subscription_id}: {e}",
                    exc_info=True
                )
        except Exception as e:
            logger.error(
                f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ID {subscription_id}: {e}",
                exc_info=True
            )