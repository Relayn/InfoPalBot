"""
–ú–æ–¥—É–ª—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º APScheduler.
–≠—Ç–∏ –∑–∞–¥–∞—á–∏ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö API –∏ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
1. –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
2. –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–≥–æ–¥—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
3. –†–∞—Å—Å—ã–ª–∫–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
4. –†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ KudaGo –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º

–ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞:
- –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö API
- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
- –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—à–∏–±–∫–∏

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    # –í main.py –∏–ª–∏ –¥—Ä—É–≥–æ–º –º–æ–¥—É–ª–µ:
    scheduler.add_job(send_weather_updates, 'interval', hours=3, args=[bot])
    scheduler.add_job(send_news_updates, 'interval', hours=6, args=[bot])
    scheduler.add_job(send_events_updates, 'interval', minutes=2, args=[bot])
"""

import logging
from datetime import datetime, timezone, timedelta
from aiogram import Bot  # –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –≤ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
from aiogram.enums import ParseMode  # –î–ª—è —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è parse_mode –≤ send_message
import html  # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML-—Å—É—â–Ω–æ—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
from typing import List, Dict, Any, Optional  # –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from app.database.session import get_session
from app.database.crud import get_active_subscriptions_by_info_type

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –ë–î
from app.database.models import (
    User,
    Subscription,
)  # Subscription –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ type hinting

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API-–∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
from app.api_clients.weather import get_weather_data
from app.api_clients.news import get_top_headlines
from app.api_clients.events import get_kudago_events

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫–æ–¥–æ–≤ –≥–æ—Ä–æ–¥–æ–≤
from app.bot.constants import (
    INFO_TYPE_WEATHER,
    INFO_TYPE_NEWS,
    INFO_TYPE_EVENTS,
    KUDAGO_LOCATION_SLUGS,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


async def test_scheduled_task() -> None:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.

    –≠—Ç–∞ –∑–∞–¥–∞—á–∞:
    1. –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    2. –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏

    Note:
        - –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        - –ù–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–º API
    """
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"APScheduler: –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ {current_time}!")


async def send_weather_updates(bot: Bot) -> None:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–≥–æ–¥—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–π, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç, –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ.
    """
    logger.info("APScheduler: –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ send_weather_updates...")
    with get_session() as db_session:
        weather_subscriptions: List[Subscription] = (
            get_active_subscriptions_by_info_type(
                session=db_session, info_type=INFO_TYPE_WEATHER
            )
        )
        logger.info(
            f"–ù–∞–π–¥–µ–Ω–æ {len(weather_subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–≥–æ–¥—É."
        )

        for sub in weather_subscriptions:
            now = datetime.now(timezone.utc)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if sub.last_sent_at and (now - sub.last_sent_at) < timedelta(
                hours=sub.frequency
            ):
                continue  # –ï—â–µ –Ω–µ –≤—Ä–µ–º—è

            if not sub.details or not sub.user or not sub.user.telegram_id:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub.id}: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                continue

            telegram_id_to_send = sub.user.telegram_id
            city_name = sub.details
            logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–≥–æ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id_to_send}, –≥–æ—Ä–æ–¥: {city_name}"
            )

            weather_data = await get_weather_data(city_name)
            if weather_data and not weather_data.get("error"):
                try:
                    description = weather_data["weather"][0]["description"].capitalize()
                    temp = weather_data["main"]["temp"]
                    feels_like = weather_data["main"]["feels_like"]
                    message_text = (
                        f"üîî <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥. {html.escape(city_name)}:</b>\n"
                        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                        f"‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                    )
                    await bot.send_message(
                        chat_id=telegram_id_to_send, text=message_text
                    )
                    logger.info(
                        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id_to_send}."
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    sub.last_sent_at = now
                    db_session.add(sub)
                    db_session.commit()

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id_to_send}: {e}",
                        exc_info=True,
                    )
            elif weather_data and weather_data.get("error"):
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≥–æ—Ä–æ–¥: {city_name}): {weather_data.get('message')}"
                )
            else:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≥–æ—Ä–æ–¥: {city_name}), API –≤–µ—Ä–Ω—É–ª None."
                )
    logger.info("APScheduler: –ó–∞–¥–∞—á–∞ send_weather_updates –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def send_news_updates(bot: Bot) -> None:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.
    –†–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ send_weather_updates, –ø—Ä–æ–≤–µ—Ä—è—è –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    logger.info("APScheduler: –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ send_news_updates...")
    with get_session() as db_session:
        all_news_subscriptions = get_active_subscriptions_by_info_type(
            session=db_session, info_type=INFO_TYPE_NEWS
        )

        if not all_news_subscriptions:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        users_to_notify: Dict[int, Subscription] = {}
        now = datetime.now(timezone.utc)

        for sub in all_news_subscriptions:
            if sub.user_id and (
                not sub.last_sent_at
                or (now - sub.last_sent_at) >= timedelta(hours=sub.frequency)
            ):
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏, –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é "—Å—Ç–∞—Ä—É—é" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if (
                    sub.user_id not in users_to_notify
                    or users_to_notify[sub.user_id].last_sent_at > sub.last_sent_at
                ):
                    users_to_notify[sub.user_id] = sub

        if not users_to_notify:
            logger.info("–î–ª—è –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ.")
            return

        logger.info(
            f"–ù–∞–π–¥–µ–Ω–æ {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."
        )

        articles = await get_top_headlines()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª –ª–∏ API –æ—à–∏–±–∫—É –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        if isinstance(articles, dict) and articles.get("error"):
            logger.error(
                f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {articles.get('message')}"
            )
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É

        if not articles:
            logger.warning("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        message_text = "üîî <b>–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(
            [f"‚ñ™Ô∏è <a href='{a['url']}'>{html.escape(a['title'])}</a>" for a in articles]
        )

        for user_id, sub_to_update in users_to_notify.items():
            try:
                telegram_id = sub_to_update.user.telegram_id
                await bot.send_message(
                    chat_id=telegram_id,
                    text=message_text,
                    disable_web_page_preview=True,
                )
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}.")
                sub_to_update.last_sent_at = now
                db_session.add(sub_to_update)

            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}): {e}",
                    exc_info=True,
                )

        db_session.commit()

    logger.info("APScheduler: –ó–∞–¥–∞—á–∞ send_news_updates –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def send_events_updates(bot: Bot) -> None:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.
    –†–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ send_weather_updates, –ø—Ä–æ–≤–µ—Ä—è—è –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    logger.info("APScheduler: –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ send_events_updates...")
    with get_session() as db_session:
        events_subscriptions: List[Subscription] = (
            get_active_subscriptions_by_info_type(
                session=db_session, info_type=INFO_TYPE_EVENTS
            )
        )
        logger.info(
            f"–ù–∞–π–¥–µ–Ω–æ {len(events_subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è."
        )

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É (location_slug), —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω API –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–æ—Ä–æ–¥
        subscriptions_by_city: Dict[str, List[Subscription]] = {}
        for sub in events_subscriptions:
            if sub.details:
                if sub.details not in subscriptions_by_city:
                    subscriptions_by_city[sub.details] = []
                subscriptions_by_city[sub.details].append(sub)

        now = datetime.now(timezone.utc)

        for city_slug, subscriptions in subscriptions_by_city.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ, –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            is_time_to_send_for_group = any(
                not sub.last_sent_at
                or (now - sub.last_sent_at) >= timedelta(hours=sub.frequency)
                for sub in subscriptions
            )

            if not is_time_to_send_for_group:
                continue

            logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_slug}")
            events_data = await get_kudago_events(location_slug=city_slug, page_size=5)

            if (
                not events_data
                or "results" not in events_data
                or not events_data["results"]
            ):
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_slug}.")
                continue

            message_text = (
                f"üîî <b>–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ —Å –∫–æ–¥–æ–º '{html.escape(city_slug)}':</b>\n\n"
                + "\n\n".join(
                    [
                        f"‚ñ™Ô∏è <a href='{e['site_url']}'>{html.escape(e['title'])}</a>"
                        for e in events_data["results"]
                    ]
                )
            )

            for sub in subscriptions:
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ, —Ç.–∫. –≤ –≥—Ä—É–ø–ø–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã
                if not sub.last_sent_at or (now - sub.last_sent_at) >= timedelta(
                    hours=sub.frequency
                ):
                    try:
                        telegram_id = sub.user.telegram_id
                        await bot.send_message(
                            chat_id=telegram_id,
                            text=message_text,
                            disable_web_page_preview=True,
                        )
                        logger.info(
                            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_slug}."
                        )
                        sub.last_sent_at = now
                        db_session.add(sub)
                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {sub.user_id}): {e}",
                            exc_info=True,
                        )

        db_session.commit()

    logger.info("APScheduler: –ó–∞–¥–∞—á–∞ send_events_updates –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
