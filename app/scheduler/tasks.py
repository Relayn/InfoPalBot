import logging
from datetime import datetime
from aiogram import Bot
import html

from app.database.session import get_session
from app.database.crud import get_active_subscriptions_by_info_type, get_user_by_telegram_id
from app.api_clients.weather import get_weather_data
from app.api_clients.news import get_top_headlines
from app.api_clients.events import get_kudago_events
from app.bot.constants import INFO_TYPE_WEATHER, INFO_TYPE_NEWS, INFO_TYPE_EVENTS, KUDAGO_LOCATION_SLUGS
from app.database.models import User

logger = logging.getLogger(__name__)

async def test_scheduled_task():
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"APScheduler: –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ {current_time}!")


async def send_weather_updates(bot: Bot):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.info("APScheduler: –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ send_weather_updates...")
    with next(get_session()) as db_session:
        weather_subscriptions = get_active_subscriptions_by_info_type(db_session, INFO_TYPE_WEATHER)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(weather_subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–≥–æ–¥—É.")
        for sub in weather_subscriptions:
            if not sub.details or not sub.user_id: continue
            user = db_session.get(User, sub.user_id)
            if not user or not user.telegram_id: continue
            telegram_id_to_send = user.telegram_id;
            city_name = sub.details
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–≥–æ–¥—É –¥–ª—è {telegram_id_to_send}, –≥–æ—Ä–æ–¥: {city_name}")
            weather_data = await get_weather_data(city_name)
            if weather_data and not weather_data.get("error"):
                try:
                    description = weather_data['weather'][0]['description'].capitalize();
                    temp = weather_data['main']['temp'];
                    feels_like = weather_data['main']['feels_like']
                    message_text = (f"üîî <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥. {html.escape(city_name)}:</b>\n"
                                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                    await bot.send_message(chat_id=telegram_id_to_send, text=message_text)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ {telegram_id_to_send}: {e}")
            # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API –ø–æ–≥–æ–¥—ã) ...
    logger.info("APScheduler: –ó–∞–¥–∞—á–∞ send_weather_updates –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def send_news_updates(bot: Bot):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π (—Ç–æ–ø-5 –¥–ª—è –†–æ—Å—Å–∏–∏).
    """
    logger.info("APScheduler: –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ send_news_updates...")
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∑–∞—Ç–µ–º –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_news_subscriptions = []
    with next(get_session()) as db_session:
        all_news_subscriptions = get_active_subscriptions_by_info_type(
            session=db_session,
            info_type=INFO_TYPE_NEWS
        )

    if not all_news_subscriptions:
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        logger.info("APScheduler: –ó–∞–¥–∞—á–∞ send_news_updates –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
    # (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, —Ö–æ—Ç—è —ç—Ç–æ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ)
    user_ids_subscribed_to_news = list(set([sub.user_id for sub in all_news_subscriptions if sub.user_id]))
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(user_ids_subscribed_to_news)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏.")

    if not user_ids_subscribed_to_news:
        logger.info("APScheduler: –ó–∞–¥–∞—á–∞ send_news_updates –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏).")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö
    articles_or_error = await get_top_headlines(country="ru", page_size=5)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 5 –Ω–æ–≤–æ—Å—Ç–µ–π

    if isinstance(articles_or_error, dict) and articles_or_error.get("error"):
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {articles_or_error.get('message')}")
        logger.info("APScheduler: –ó–∞–¥–∞—á–∞ send_news_updates –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API.")
        return

    if not isinstance(articles_or_error, list) or not articles_or_error:
        logger.info("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç API –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        logger.info("APScheduler: –ó–∞–¥–∞—á–∞ send_news_updates –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    news_message_lines = ["<b>üì∞ –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è):</b>"]
    for i, article in enumerate(articles_or_error):
        title = html.escape(article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
        url = article.get('url', '#')
        source = html.escape(article.get('source', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'))
        news_message_lines.append(f"{i + 1}. <a href='{url}'>{title}</a> ({source})")
    news_message_text = "\n".join(news_message_lines)

    # –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    with next(get_session()) as db_session:  # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id
        for user_id in user_ids_subscribed_to_news:
            user = db_session.get(User, user_id)
            if user and user.telegram_id:
                try:
                    await bot.send_message(chat_id=user.telegram_id, text=news_message_text,
                                           disable_web_page_preview=True)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            else:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ telegram_id –¥–ª—è user_id: {user_id} –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")

    logger.info("APScheduler: –ó–∞–¥–∞—á–∞ send_news_updates –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def send_events_updates(bot: Bot):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö KudaGo.
    """
    logger.info("APScheduler: –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ send_events_updates...")
    with next(get_session()) as db_session:
        event_subscriptions = get_active_subscriptions_by_info_type(
            session=db_session,
            info_type=INFO_TYPE_EVENTS
        )
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(event_subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è.")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ location_slug, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω API –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–æ—Ä–æ–¥
        events_by_location: dict[str, list[dict]] = {}
        users_for_location: dict[str, list[int]] = {}  # telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        for sub in event_subscriptions:
            if not sub.details or not sub.user_id:  # details —ç—Ç–æ location_slug
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ID {sub.id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç location_slug –∏–ª–∏ user_id.")
                continue

            location_slug = sub.details
            user = db_session.get(User, sub.user_id)
            if not user or not user.telegram_id:
                logger.warning(
                    f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ telegram_id –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ID {sub.id} (user_id: {sub.user_id}).")
                continue

            if location_slug not in users_for_location:
                users_for_location[location_slug] = []
            if user.telegram_id not in users_for_location[
                location_slug]:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
                users_for_location[location_slug].append(user.telegram_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ location_slug
        for location_slug, user_telegram_ids in users_for_location.items():
            if not user_telegram_ids: continue

            logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π KudaGo –¥–ª—è location_slug: {location_slug}")
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏—è
            kudago_result = await get_kudago_events(location=location_slug, page_size=3)

            if isinstance(kudago_result, dict) and kudago_result.get("error"):
                logger.error(
                    f"–û—à–∏–±–∫–∞ API KudaGo –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è '{location_slug}': {kudago_result.get('message')}")
                continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥–æ—Ä–æ–¥—É

            if not isinstance(kudago_result, list) or not kudago_result:
                logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π KudaGo –¥–ª—è '{location_slug}'.")
                # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "—Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç", –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ" –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            city_display_name = location_slug
            for name, slug_val in KUDAGO_LOCATION_SLUGS.items():  # KUDAGO_LOCATION_SLUGS –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                if slug_val == location_slug:
                    city_display_name = name.capitalize()
                    break

            event_message_lines = [f"<b>üéâ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –≥. {html.escape(city_display_name)}:</b>"]
            for i, event_data in enumerate(kudago_result):
                title = html.escape(event_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
                site_url = event_data.get('site_url', '#')
                # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                description_raw = event_data.get('description', '')
                description = html.unescape(
                    description_raw.replace('<p>', '').replace('</p>', '').replace('<br>', '\n')).strip()

                event_str = f"{i + 1}. <a href='{site_url}'>{title}</a>"
                if description:
                    max_desc_len = 70  # –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                    if len(description) > max_desc_len:
                        description = description[:max_desc_len] + "..."
                    event_str += f"\n   <i>{html.escape(description)}</i>"
                event_message_lines.append(event_str)

            event_message_text = "\n\n".join(event_message_lines)

            # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            for telegram_id in user_telegram_ids:
                try:
                    await bot.send_message(chat_id=telegram_id, text=event_message_text, disable_web_page_preview=True)
                    logger.info(
                        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö –¥–ª—è {location_slug} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}.")
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –¥–ª—è {location_slug} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

    logger.info("APScheduler: –ó–∞–¥–∞—á–∞ send_events_updates –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
