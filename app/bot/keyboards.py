import html
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .constants import (
    INFO_TYPE_NEWS,
    INFO_TYPE_EVENTS,
    NEWS_CATEGORIES,
    EVENTS_CATEGORIES,
    INFO_TYPE_WEATHER,
    KUDAGO_LOCATION_SLUGS,
)


def get_frequency_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    buttons = [
        [
            InlineKeyboardButton(text="–†–∞–∑ –≤ 3 —á–∞—Å–∞", callback_data="frequency:3"),
            InlineKeyboardButton(text="–†–∞–∑ –≤ 6 —á–∞—Å–æ–≤", callback_data="frequency:6"),
        ],
        [
            InlineKeyboardButton(text="–†–∞–∑ –≤ 12 —á–∞—Å–æ–≤", callback_data="frequency:12"),
            InlineKeyboardButton(text="–†–∞–∑ –≤ 24 —á–∞—Å–∞", callback_data="frequency:24"),
        ],
        [
            InlineKeyboardButton(
                text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 (UTC)", callback_data="cron:09:00"
            )
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="subscribe_fsm_cancel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_city_selection_keyboard(cities: list[str]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.

    Args:
        cities (list[str]): –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.

    Returns:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≥–æ—Ä–æ–¥–∞–º–∏.
    """
    buttons = []
    row = []
    for city in cities:
        row.append(
            InlineKeyboardButton(text=city, callback_data=f"city_select:{city}")
        )
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    buttons.append(
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="subscribe_fsm_cancel")]
    )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_profile_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è.
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üìú –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="profile_subscriptions"
            )
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É", callback_data="profile_close")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_back_to_profile_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å".
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile_menu"
                )
            ]
        ]
    )


def get_profile_subscriptions_keyboard(
    subscriptions: list,
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

    Args:
        subscriptions (list): –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫.

    Returns:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    buttons = []
    for sub in subscriptions:
        schedule_str = ""
        if sub.frequency:
            schedule_str = f"—Ä–∞–∑ –≤ {sub.frequency} —á."
        elif sub.cron_expression:
            parts = sub.cron_expression.split()
            schedule_str = f"–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {int(parts[1]):02d}:{int(parts[0]):02d}"

        details_str = ""
        if sub.info_type == INFO_TYPE_WEATHER:
            details_str = f"üå¶Ô∏è –ü–æ–≥–æ–¥–∞: {html.escape(sub.details)}"
        elif sub.info_type == INFO_TYPE_NEWS:
            category_str = f" ({sub.category or '–≤—Å–µ'})"
            details_str = f"üì∞ –ù–æ–≤–æ—Å—Ç–∏{category_str}"
        elif sub.info_type == INFO_TYPE_EVENTS:
            city_name = next(
                (
                    name.capitalize()
                    for name, slug in KUDAGO_LOCATION_SLUGS.items()
                    if slug == sub.details
                ),
                sub.details,
            )
            category_str = f" ({sub.category or '–≤—Å–µ'})"
            details_str = f"üéâ –°–æ–±—ã—Ç–∏—è: {html.escape(city_name)}{category_str}"

        buttons.append(
            [
                InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å: {details_str} ({schedule_str})",
                    callback_data=f"profile_delete_sub:{sub.id}",
                )
            ]
        )

    buttons.append(
        [
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile_menu"
            )
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_categories_keyboard(info_type: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ —Å–æ–±—ã—Ç–∏–π.

    Args:
        info_type (str): –¢–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ('news' –∏–ª–∏ 'events'), –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ
                         –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Returns:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    """
    buttons = []
    categories_map = {}

    if info_type == INFO_TYPE_NEWS:
        categories_map = NEWS_CATEGORIES
    elif info_type == INFO_TYPE_EVENTS:
        categories_map = EVENTS_CATEGORIES

    if categories_map:
        row = []
        for slug, text in categories_map.items():
            row.append(
                InlineKeyboardButton(
                    text=text, callback_data=f"subscribe_category:{slug}"
                )
            )
            if len(row) == 2:
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)

    buttons.append(
        [
            InlineKeyboardButton(
                text="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤—Å–µ –ø–æ–¥—Ä—è–¥)",
                callback_data="subscribe_category:any",
            )
        ]
    )
    buttons.append(
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="subscribe_fsm_cancel")]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)