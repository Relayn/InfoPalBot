import logging
import html
from typing import List
from datetime import datetime, timezone

from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from ..constants import (
    INFO_TYPE_EVENTS,
    INFO_TYPE_NEWS,
    INFO_TYPE_WEATHER,
    KUDAGO_LOCATION_SLUGS,
)
from ..fsm import SubscriptionStates
from ..keyboards import (
    get_frequency_keyboard,
    get_categories_keyboard,
    get_city_selection_keyboard,
)
from ..data.cities import RUSSIAN_CITIES

from app.database.crud import (
    create_subscription as db_create_subscription,
    delete_subscription as db_delete_subscription,
    get_subscription_by_user_and_type,
    get_subscriptions_by_user_id,
    get_user_by_telegram_id,
    log_user_action,
)
from app.database.models import Subscription
from app.database.session import get_session
from app.scheduler.main import scheduler
from app.scheduler.tasks import send_single_notification

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("subscribe"), StateFilter(None))
async def process_subscribe_command_start(message: types.Message, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    telegram_id = message.from_user.id
    with get_session() as db_session:
        user = get_user_by_telegram_id(session=db_session, telegram_id=telegram_id)
        if user and len(get_subscriptions_by_user_id(db_session, user.id)) >= 3:
            await message.answer(
                "–£ –≤–∞—Å —É–∂–µ 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏. –≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é /unsubscribe."
            )
            log_user_action(db_session, telegram_id, "/subscribe", "Limit reached")
            return
        log_user_action(db_session, telegram_id, "/subscribe", "Start process")
    keyboard_buttons = [
        [InlineKeyboardButton(text="üå¶Ô∏è –ü–æ–≥–æ–¥–∞", callback_data=f"subscribe_type:{INFO_TYPE_WEATHER}")],
        [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏ (–°–®–ê)", callback_data=f"subscribe_type:{INFO_TYPE_NEWS}")],
        [InlineKeyboardButton(text="üéâ –°–æ–±—ã—Ç–∏—è", callback_data=f"subscribe_type:{INFO_TYPE_EVENTS}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="subscribe_fsm_cancel")],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer("–ù–∞ –∫–∞–∫–æ–π —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=keyboard)
    await state.set_state(SubscriptionStates.choosing_info_type)


@router.callback_query(StateFilter(SubscriptionStates.choosing_info_type), F.data.startswith("subscribe_type:"))
async def process_info_type_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–ø–æ–≥–æ–¥–∞, –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–±—ã—Ç–∏—è).
    –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –î–ª—è –ø–æ–≥–æ–¥—ã - –Ω–∞ –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞.
    """
    telegram_id = callback_query.from_user.id
    info_type = callback_query.data.split(":")[1]
    await state.update_data(info_type=info_type)

    with get_session() as db_session:
        log_user_action(db_session, telegram_id, "subscribe_step1", f"Type: {info_type}")

    if info_type in [INFO_TYPE_NEWS, INFO_TYPE_EVENTS]:
        await callback_query.message.edit_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_categories_keyboard(info_type),
        )
        await state.set_state(SubscriptionStates.choosing_category)
    elif info_type == INFO_TYPE_WEATHER:
        await callback_query.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü–æ–≥–æ–¥–∞'.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã), –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã."
        )
        await state.set_state(SubscriptionStates.prompting_city_search)

    await callback_query.answer()


@router.callback_query(F.data == "subscribe_fsm_cancel")
async def callback_fsm_cancel_process(callback_query: types.CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    telegram_id = callback_query.from_user.id
    with get_session() as db_session:
        log_user_action(db_session, telegram_id, "subscribe_fsm_cancel", "Cancelled by button")
    await callback_query.answer()
    await callback_query.message.edit_text("–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()

@router.callback_query(StateFilter(SubscriptionStates.choosing_category), F.data.startswith("subscribe_category:"))
async def process_category_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ —Å–æ–±—ã—Ç–∏–π.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π.
    """
    telegram_id = callback_query.from_user.id
    category_slug = callback_query.data.split(":")[1]
    user_data = await state.get_data()
    info_type = user_data.get("info_type")

    category_to_save = None if category_slug == "any" else category_slug

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
    if info_type == INFO_TYPE_NEWS:
        with get_session() as db_session:
            user = get_user_by_telegram_id(session=db_session, telegram_id=telegram_id)
            if get_subscription_by_user_and_type(
                db_session, user.id, info_type, category=category_to_save
            ):
                category_name = category_to_save or "–ª—é–±–∞—è"
                await callback_query.message.edit_text(
                    f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '–ù–æ–≤–æ—Å—Ç–∏' (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name})."
                )
                await state.clear()
                await callback_query.answer()
                return

    await state.update_data(category=category_to_save)

    if info_type == INFO_TYPE_NEWS:
        await callback_query.message.edit_text(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É:",
            reply_markup=get_frequency_keyboard(),
        )
        await state.set_state(SubscriptionStates.choosing_frequency)
    elif info_type == INFO_TYPE_EVENTS:
        await callback_query.message.edit_text(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã):"
        )
        await state.set_state(SubscriptionStates.prompting_city_search)

    await callback_query.answer()


@router.message(StateFilter(SubscriptionStates.prompting_city_search), F.text)
async def process_city_search(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞.
    """
    if not message.text:
        return
    query = message.text.strip()
    if len(query) < 3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    # –ò—â–µ–º –≥–æ—Ä–æ–¥–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    found_cities = [
        city for city in RUSSIAN_CITIES if query.lower() in city.lower()
    ]

    if not found_cities:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    keyboard = get_city_selection_keyboard(found_cities[:10])
    await message.answer(
        "–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=keyboard
    )
    await state.set_state(SubscriptionStates.choosing_city_from_list)


@router.callback_query(
    StateFilter(SubscriptionStates.choosing_city_from_list),
    F.data.startswith("city_select:"),
)
async def process_city_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    await callback_query.answer()
    selected_city = callback_query.data.split(":", 1)[1]

    user_data = await state.get_data()
    info_type = user_data.get("info_type")
    category = user_data.get("category")
    details_to_save = selected_city  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–≥–æ–¥—ã

    # –î–ª—è —Å–æ–±—ã—Ç–∏–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å slug
    if info_type == INFO_TYPE_EVENTS:
        location_slug = KUDAGO_LOCATION_SLUGS.get(selected_city.lower())
        if not location_slug:
            await callback_query.message.edit_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–æ—Ä–æ–¥ '{html.escape(selected_city)}' –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Å–æ–±—ã—Ç–∏–π. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /subscribe."
            )
            await state.clear()
            return
        details_to_save = location_slug

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    with get_session() as db_session:
        user = get_user_by_telegram_id(
            session=db_session, telegram_id=callback_query.from_user.id
        )
        if get_subscription_by_user_and_type(
            db_session, user.id, info_type, details_to_save, category
        ):
            await callback_query.message.edit_text(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞."
            )
            await state.clear()
            return

    await state.update_data(details=details_to_save)
    await callback_query.message.edit_text(
        f"–ì–æ—Ä–æ–¥ '{html.escape(selected_city)}' –≤—ã–±—Ä–∞–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É:",
        reply_markup=get_frequency_keyboard(),
    )
    await state.set_state(SubscriptionStates.choosing_frequency)


@router.callback_query(
    StateFilter(SubscriptionStates.choosing_frequency),
    F.data.startswith("frequency:") | F.data.startswith("cron:"),
)
async def process_frequency_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã (–∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ cron), –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    """
    await callback_query.answer()
    telegram_id = callback_query.from_user.id
    user_data = await state.get_data()

    sub_params = {}
    job_params = {}
    callback_data = callback_query.data

    if callback_data.startswith("frequency:"):
        frequency_hours = int(callback_data.split(":")[1])
        sub_params["frequency"] = frequency_hours
        job_params = {"trigger": "interval", "hours": frequency_hours}
        log_details = f"Data: {user_data}, Freq: {frequency_hours}h"
    elif callback_data.startswith("cron:"):
        time_str = callback_data.split(":", 1)[1]
        hour, minute = map(int, time_str.split(":"))
        cron_expr = f"{minute} {hour} * * *"
        sub_params["cron_expression"] = cron_expr
        job_params = {"trigger": "cron", "hour": hour, "minute": minute}
        log_details = f"Data: {user_data}, Cron: {time_str}"
    else:
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    with get_session() as db_session:
        user = get_user_by_telegram_id(session=db_session, telegram_id=telegram_id)
        if not user:
            await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        new_subscription = db_create_subscription(
            session=db_session,
            user_id=user.id,
            info_type=user_data["info_type"],
            details=user_data.get("details"),
            category=user_data.get("category"),
            **sub_params,
        )
        log_user_action(db_session, telegram_id, "subscribe_finish", log_details)

        if new_subscription and new_subscription.id:
            job_id = f"sub_{new_subscription.id}"
            job_kwargs = {
                "bot": callback_query.bot,
                "subscription_id": new_subscription.id,
            }
            try:
                scheduler.add_job(
                    send_single_notification,
                    id=job_id,
                    kwargs=job_kwargs,
                    replace_existing=True,
                    **job_params,
                )
                logger.info(
                    f"–ó–∞–¥–∞—á–∞ {job_id} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞. Params: {job_params}"
                )
                await callback_query.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!")
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {job_id} –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}",
                    exc_info=True,
                )
                await callback_query.message.edit_text(
                    "–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –µ–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        else:
            await callback_query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
            )

    await state.clear()


@router.message(Command("mysubscriptions"))
async def process_mysubscriptions_command(message: types.Message):
    await message.answer(
        "üí° –î–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /profile."
    )
    telegram_id = message.from_user.id
    with get_session() as db_session:
        user = get_user_by_telegram_id(session=db_session, telegram_id=telegram_id)
        if not user:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.")
            return
        subscriptions: List[Subscription] = get_subscriptions_by_user_id(db_session, user.id)
        if not subscriptions:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return
        response_lines = ["<b>üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>"]
        for i, sub in enumerate(subscriptions):
            schedule_str = ""
            if sub.frequency:
                schedule_str = f"—Ä–∞–∑ –≤ {sub.frequency} —á."
            elif sub.cron_expression:
                # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                parts = sub.cron_expression.split()
                schedule_str = f"–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {int(parts[1]):02d}:{int(parts[0]):02d} (UTC)"

            details_str = ""
            if sub.info_type == INFO_TYPE_WEATHER:
                details_str = f"–ü–æ–≥–æ–¥–∞: <b>{html.escape(sub.details)}</b>"
            elif sub.info_type == INFO_TYPE_NEWS:
                category_str = f" ({sub.category or '–≤—Å–µ'})"
                details_str = f"–ù–æ–≤–æ—Å—Ç–∏ (–°–®–ê){category_str}"
            elif sub.info_type == INFO_TYPE_EVENTS:
                city_name = next(
                    (name.capitalize() for name, slug in KUDAGO_LOCATION_SLUGS.items() if slug == sub.details),
                    sub.details)
                category_str = f" ({sub.category or '–≤—Å–µ'})"
                details_str = f"–°–æ–±—ã—Ç–∏—è: <b>{html.escape(city_name)}</b>{category_str}"

            response_lines.append(f"{i + 1}. {details_str} ({schedule_str})")
            await message.answer("\n".join(response_lines))


@router.message(Command("unsubscribe"))
async def process_unsubscribe_command_start(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    with get_session() as db_session:
        user = get_user_by_telegram_id(session=db_session, telegram_id=telegram_id)
        if not user:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.")
            return
        subscriptions = get_subscriptions_by_user_id(db_session, user.id)
        if not subscriptions:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return
        keyboard_buttons = []
        for sub in subscriptions:
            schedule_str = ""
            if sub.frequency:
                schedule_str = f"—Ä–∞–∑ –≤ {sub.frequency} —á."
            elif sub.cron_expression:
                parts = sub.cron_expression.split()
                schedule_str = f"–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {int(parts[1]):02d}:{int(parts[0]):02d} (UTC)"

            details_str = ""
            if sub.info_type == INFO_TYPE_WEATHER:
                details_str = f"–ü–æ–≥–æ–¥–∞: {html.escape(sub.details)}"
            elif sub.info_type == INFO_TYPE_NEWS:
                category_str = f" ({sub.category or '–≤—Å–µ'})"
                details_str = f"–ù–æ–≤–æ—Å—Ç–∏ (–°–®–ê){category_str}"
            elif sub.info_type == INFO_TYPE_EVENTS:
                city_name = next(
                    (name.capitalize() for name, slug in KUDAGO_LOCATION_SLUGS.items() if slug == sub.details),
                    sub.details)
                category_str = f" ({sub.category or '–≤—Å–µ'})"
                details_str = f"–°–æ–±—ã—Ç–∏—è: {html.escape(city_name)}{category_str}"
            keyboard_buttons.append([InlineKeyboardButton(text=f"‚ùå {details_str} ({schedule_str})",
                                                          callback_data=f"unsubscribe_confirm:{sub.id}")])
        keyboard_buttons.append(
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data="unsubscribe_action_cancel")])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:",
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons))
        log_user_action(db_session, telegram_id, "/unsubscribe", "Start process")


@router.callback_query(F.data.startswith("unsubscribe_confirm:"))
async def process_unsubscribe_confirm(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    sub_id = int(callback_query.data.split(":")[1])
    telegram_id = callback_query.from_user.id
    job_id = f"sub_{sub_id}"

    with get_session() as db_session:
        user = get_user_by_telegram_id(session=db_session, telegram_id=telegram_id)
        sub_to_delete = db_session.get(Subscription, sub_id)

        if not user or not sub_to_delete or sub_to_delete.user_id != user.id:
            await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        db_delete_subscription(db_session, sub_id)

        try:
            if scheduler.get_job(job_id):
                scheduler.remove_job(job_id)
                logger.info(f"–ó–∞–¥–∞—á–∞ {job_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
            else:
                logger.warning(f"–ó–∞–¥–∞—á–∞ {job_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {job_id} –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}", exc_info=True)

        await callback_query.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.")
        log_user_action(db_session, telegram_id, "unsubscribe_confirm", f"Sub ID: {sub_id}")


@router.callback_query(F.data == "unsubscribe_action_cancel")
async def process_unsubscribe_action_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    with get_session() as db_session:
        log_user_action(db_session, callback_query.from_user.id, "unsubscribe_cancel")