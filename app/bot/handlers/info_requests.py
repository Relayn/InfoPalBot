import logging
import html
from typing import Optional

from aiogram import Router, types
from aiogram.filters import Command, CommandObject

from app.api_clients.events import get_kudago_events
from app.api_clients.news import get_top_headlines
from app.api_clients.weather import get_weather_data
from app.database.crud import log_user_action
from app.database.session import get_session
from ..constants import KUDAGO_LOCATION_SLUGS

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("weather"))
async def process_weather_command(message: types.Message, command: CommandObject):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    city_name_arg: Optional[str] = command.args
    telegram_id: int = message.from_user.id
    log_command: str = "/weather"

    with get_session() as db_session:
        if not city_name_arg:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞...")
            log_user_action(db_session, telegram_id, log_command, "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        city_name_clean: str = city_name_arg.strip()
        log_details = f"–≥–æ—Ä–æ–¥: {city_name_clean}"
        await message.reply(
            f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name_clean)}</b>..."
        )

        weather_data = await get_weather_data(city_name_clean)
        log_status_suffix = ""

        if weather_data and not weather_data.get("error"):
            try:
                description = weather_data["weather"][0]["description"].capitalize()
                temp = weather_data["main"]["temp"]
                feels_like = weather_data["main"]["feels_like"]
                humidity = weather_data["main"]["humidity"]
                wind_speed = weather_data["wind"]["speed"]
                wind_deg = weather_data["wind"].get("deg")
                wind_direction_str = ""
                if wind_deg is not None:
                    directions = ["–°–µ–≤–µ—Ä–Ω—ã–π", "–°-–í", "–í–æ—Å—Ç–æ—á–Ω—ã–π", "–Æ-–í", "–Æ–∂–Ω—ã–π", "–Æ-–ó", "–ó–∞–ø–∞–¥–Ω—ã–π", "–°-–ó"]
                    wind_direction_str = f", {directions[int((wind_deg % 360) / 45)]}"

                response_text = (
                    f"<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {html.escape(weather_data.get('name', city_name_clean))}:</b>\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å{wind_direction_str}\n"
                    f"‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                )
                await message.answer(response_text)
                log_status_suffix = ", —É—Å–ø–µ—Ö"
            except KeyError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city_name_clean}: –∫–ª—é—á {e}", exc_info=True)
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
                log_status_suffix = f", –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)[:50]}"
        elif weather_data and weather_data.get("error"):
            error_message = weather_data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API.")
            status_code = weather_data.get("status_code")
            if status_code == 404:
                await message.reply(f"–ì–æ—Ä–æ–¥ <b>{html.escape(city_name_clean)}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω...")
            elif status_code == 401:
                await message.reply("–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã...")
            else:
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É: {html.escape(error_message)}")
            log_status_suffix = f", –æ—à–∏–±–∫–∞ API: {error_message[:50]}"
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
            log_status_suffix = ", –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API"

        log_user_action(db_session, telegram_id, log_command, log_details + log_status_suffix)


@router.message(Command("news"))
async def process_news_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /news.
    """
    telegram_id: int = message.from_user.id
    await message.reply("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –°–®–ê...")

    with get_session() as db_session:
        # –í—ã–∑—ã–≤–∞–µ–º –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "us"
        articles = await get_top_headlines(page_size=5)
        log_status_details = "unknown_error"

        if isinstance(articles, list) and articles:
            response_lines = ["<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–°–®–ê):</b>"]
            for i, article in enumerate(articles):
                title = html.escape(article.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
                url = article.get("url", "#")
                source = html.escape(article.get("source", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"))
                response_lines.append(f"{i + 1}. <a href='{url}'>{title}</a> ({source})")
            await message.answer("\n".join(response_lines), disable_web_page_preview=True)
            log_status_details = "success, country=us"
        elif isinstance(articles, list) and not articles:
            await message.reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            log_status_details = "no_articles_found, country=us"
        elif isinstance(articles, dict) and articles.get("error"):
            error_message = articles.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API.")
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {html.escape(error_message)}")
            log_status_details = f"api_error: {error_message[:100]}"
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö...")
            log_status_details = "unexpected_api_response"

        log_user_action(db_session, telegram_id, "/news", log_status_details)


@router.message(Command("events"))
async def process_events_command(message: types.Message, command: CommandObject):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    city_arg: Optional[str] = command.args
    telegram_id: int = message.from_user.id

    with get_session() as db_session:
        if not city_arg:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥...\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥...")
            log_user_action(db_session, telegram_id, "/events", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        city_arg_clean = city_arg.strip()
        location_slug = KUDAGO_LOCATION_SLUGS.get(city_arg_clean.lower())
        log_details = f"–≥–æ—Ä–æ–¥: {city_arg_clean}"

        if not location_slug:
            await message.reply(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –∑–Ω–∞—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_arg_clean)}'...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥...")
            log_details += ", –≥–æ—Ä–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            log_user_action(db_session, telegram_id, "/events", log_details)
            return

        await message.reply(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg_clean)}</b>...")
        events_result = await get_kudago_events(location=location_slug, page_size=5)
        log_status_suffix = ""

        if isinstance(events_result, list) and events_result:
            response_lines = [f"<b>üéâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {html.escape(city_arg_clean.capitalize())}:</b>"]
            for i, event in enumerate(events_result):
                title = html.escape(event.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
                site_url = event.get("site_url", "#")
                description_raw = event.get("description", "")
                description = html.unescape(description_raw.replace("<p>", "").replace("</p>", "").replace("<br>", "\n")).strip()
                event_str = f"{i + 1}. <a href='{site_url}'>{title}</a>"
                if description:
                    event_str += f"\n   <i>{html.escape(description[:100])}{'...' if len(description) > 100 else ''}</i>"
                response_lines.append(event_str)
            await message.answer("\n\n".join(response_lines), disable_web_page_preview=True)
            log_status_suffix = ", —É—Å–ø–µ—Ö"
        elif isinstance(events_result, list) and not events_result:
            await message.reply(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg_clean)}</b>.")
            log_status_suffix = ", –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        elif isinstance(events_result, dict) and events_result.get("error"):
            error_message = events_result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API.")
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è: {html.escape(error_message)}")
            log_status_suffix = f", –æ—à–∏–±–∫–∞ API: {error_message[:70]}"
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö...")
            log_status_suffix = ", unexpected_api_response"

        log_user_action(db_session, telegram_id, "/events", log_details + log_status_suffix)