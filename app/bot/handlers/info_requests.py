"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É, —Ç–∞–∫—É—é –∫–∞–∫ –ø–æ–≥–æ–¥–∞, –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è. –û–Ω —Ç–∞–∫–∂–µ
–≤–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–µ—á–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–æ–º (FSM) –¥–ª—è
–º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.
"""
import html
import logging
from typing import Optional

from aiogram import F, Router, types
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext

from app.api_clients.events import get_kudago_events
from app.api_clients.news import get_top_headlines
from app.api_clients.weather import get_weather_data
from app.bot.constants import (
    CMD_EVENTS,
    CMD_NEWS,
    CMD_WEATHER,
    ERROR_MSG_UNKNOWN_API_ERROR,
    KUDAGO_LOCATION_SLUGS,
)
from app.bot.fsm import WeatherStates
from app.database.crud import log_user_action
from app.database.session import get_session

logger = logging.getLogger(__name__)
router = Router()


async def send_weather_for_city(message: types.Message, city_name: str):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.

    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    –ø–æ–≥–æ–¥—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
        city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
    """
    telegram_id = message.from_user.id
    city_name_clean = city_name.strip()
    log_details = f"–≥–æ—Ä–æ–¥: {city_name_clean}"

    await message.answer(
        f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name_clean)}</b>..."
    )

    weather_data = await get_weather_data(city_name_clean)
    log_status_suffix = ""

    with get_session() as db_session:
        if weather_data and not weather_data.get("error"):
            try:
                description = weather_data["weather"][0]["description"].capitalize()
                temp = weather_data["main"]["temp"]
                feels_like = weather_data["main"]["feels_like"]
                humidity = weather_data["main"]["humidity"]
                wind_speed = weather_data["wind"]["speed"]
                wind_deg = weather_data["wind"].get("deg")
                wind_direction_str = ""
                if wind_deg is not None:
                    directions = [
                        "–°–µ–≤–µ—Ä–Ω—ã–π", "–°-–í", "–í–æ—Å—Ç–æ—á–Ω—ã–π", "–Æ-–í",
                        "–Æ–∂–Ω—ã–π", "–Æ-–ó", "–ó–∞–ø–∞–¥–Ω—ã–π", "–°-–ó",
                    ]
                    wind_direction_str = f", {directions[int((wind_deg % 360) / 45)]}"

                response_text = (
                    f"<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {html.escape(weather_data.get('name', city_name_clean))}:</b>\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å{wind_direction_str}\n"
                    f"‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                )
                await message.answer(response_text)
                log_status_suffix = ", —É—Å–ø–µ—Ö"
            except (KeyError, IndexError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_name_clean}: {e}", exc_info=True)
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
                log_status_suffix = f", –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)[:50]}"
        elif weather_data and weather_data.get("error"):
            error_message = weather_data.get("message", ERROR_MSG_UNKNOWN_API_ERROR)
            status_code = weather_data.get("status_code")
            if status_code == 404:
                await message.answer(f"–ì–æ—Ä–æ–¥ <b>{html.escape(city_name_clean)}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É: {html.escape(error_message)}")
            log_status_suffix = f", –æ—à–∏–±–∫–∞ API: {error_message[:50]}"
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
            log_status_suffix = ", –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API"

        log_user_action(db_session, telegram_id, f"/{CMD_WEATHER}", log_details + log_status_suffix)


@router.message(Command(CMD_WEATHER))
async def process_weather_command(
    message: types.Message, command: CommandObject, state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /weather.

    –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É.
    –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        command: –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    city_name_arg: Optional[str] = command.args

    if city_name_arg:
        await send_weather_for_city(message, city_name_arg)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        await state.set_state(WeatherStates.waiting_for_city)
        with get_session() as db_session:
            log_user_action(
                db_session, message.from_user.id, f"/{CMD_WEATHER}", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞"
            )


@router.message(StateFilter(WeatherStates.waiting_for_city), F.text)
async def process_city_for_weather(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM.

    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—Ö–æ–¥—è—Å—å
    –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ `WeatherStates.waiting_for_city`.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    await state.clear()
    await send_weather_for_city(message, message.text)


@router.message(Command(CMD_NEWS))
async def process_news_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /news.

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –°–®–ê –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    telegram_id: int = message.from_user.id
    await message.reply("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –°–®–ê...")

    with get_session() as db_session:
        articles = await get_top_headlines(page_size=5)
        log_status_details: str

        if isinstance(articles, list) and articles:
            response_lines = ["<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–°–®–ê):</b>"]
            for i, article in enumerate(articles):
                title = html.escape(article.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
                url = article.get("url", "#")
                source = html.escape(article.get("source", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"))
                response_lines.append(f"{i + 1}. <a href='{url}'>{title}</a> ({source})")
            await message.answer("\n".join(response_lines), disable_web_page_preview=True)
            log_status_details = "success, country=us"
        elif isinstance(articles, list):
            await message.reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            log_status_details = "no_articles_found, country=us"
        elif isinstance(articles, dict) and articles.get("error"):
            error_message = articles.get("message", ERROR_MSG_UNKNOWN_API_ERROR)
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {html.escape(error_message)}")
            log_status_details = f"api_error: {error_message[:100]}"
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö.")
            log_status_details = "unexpected_api_response"

        log_user_action(db_session, telegram_id, f"/{CMD_NEWS}", log_status_details)


@router.message(Command(CMD_EVENTS))
async def process_events_command(message: types.Message, command: CommandObject):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /events.

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (—á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç
    –∫–æ–º–∞–Ω–¥—ã) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        command: –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞).
    """
    city_arg: Optional[str] = command.args
    telegram_id: int = message.from_user.id

    with get_session() as db_session:
        if not city_arg:
            await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: /{CMD_EVENTS} –ú–æ—Å–∫–≤–∞")
            log_user_action(db_session, telegram_id, f"/{CMD_EVENTS}", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        city_arg_clean = city_arg.strip()
        location_slug = KUDAGO_LOCATION_SLUGS.get(city_arg_clean.lower())
        log_details = f"–≥–æ—Ä–æ–¥: {city_arg_clean}"
        log_status_suffix = ""

        if not location_slug:
            await message.reply(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –∑–Ω–∞—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_arg_clean)}'.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥."
            )
            log_status_suffix = ", –≥–æ—Ä–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
        else:
            await message.reply(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg_clean)}</b>...")
            events_result = await get_kudago_events(location=location_slug, page_size=5)

            if isinstance(events_result, list) and events_result:
                response_lines = [f"<b>üéâ –°–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {html.escape(city_arg_clean.capitalize())}:</b>"]
                for i, event in enumerate(events_result):
                    title = html.escape(event.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
                    site_url = event.get("site_url", "#")
                    response_lines.append(f"{i + 1}. <a href='{site_url}'>{title}</a>")
                await message.answer("\n\n".join(response_lines), disable_web_page_preview=True)
                log_status_suffix = ", —É—Å–ø–µ—Ö"
            elif isinstance(events_result, list):
                await message.reply(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg_clean)}</b>.")
                log_status_suffix = ", –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            elif isinstance(events_result, dict) and events_result.get("error"):
                error_message = events_result.get("message", ERROR_MSG_UNKNOWN_API_ERROR)
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è: {html.escape(error_message)}")
                log_status_suffix = f", –æ—à–∏–±–∫–∞ API: {error_message[:70]}"
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö.")
                log_status_suffix = ", unexpected_api_response"

        log_user_action(db_session, telegram_id, f"/{CMD_EVENTS}", log_details + log_status_suffix)