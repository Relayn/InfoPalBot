import logging
import asyncio
import html
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from app.config import settings
from app.database.session import get_session, create_db_and_tables
from app.database.models import User, Subscription, Log
from app.database.crud import (
    create_user_if_not_exists,
    create_subscription,
    get_subscriptions_by_user_id,
    get_subscription_by_user_and_type,
    delete_subscription,
    get_user_by_telegram_id
)
from app.api_clients.weather import get_weather_data
from app.api_clients.news import get_top_headlines
from app.api_clients.events import get_kudago_events

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=settings.LOG_LEVEL,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
default_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=default_properties)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤ –∏ –∫–æ–¥–æ–≤ KudaGo
KUDAGO_LOCATION_SLUGS = {
    "–º–æ—Å–∫–≤–∞": "msk", "–º—Å–∫": "msk", "moscow": "msk",
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "spb", "—Å–ø–±": "spb", "–ø–∏—Ç–µ—Ä": "spb", "saint petersburg": "spb",
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "nsk", "–Ω—Å–∫": "nsk",
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "ekb", "–µ–∫–±": "ekb",
    "–∫–∞–∑–∞–Ω—å": "kzn",
    "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": "nnv",
}

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ---
class SubscriptionStates(StatesGroup):
    choosing_info_type = State()
    entering_city_weather = State()
    entering_city_events = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

# –ö–æ–º–∞–Ω–¥–∞ /cancel (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ)
@dp.message(Command('cancel'), StateFilter('*')) # StateFilter('*') - –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–∫–ª—é—á–∞—è None
async def cmd_cancel_any_state(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state}.")
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())


@dp.message(Command('start'), StateFilter('*')) # –î–æ–±–∞–≤–∏–ª StateFilter('*') —á—Ç–æ–±—ã /start —Ç–æ–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def process_start_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    telegram_id = message.from_user.id
    try:
        with next(get_session()) as session:
            user = create_user_if_not_exists(session=session, telegram_id=telegram_id)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î: {user.id}")
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø InfoPalBot. –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
                             f"–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command('help'))
async def process_help_command(message: types.Message):
    help_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "<code>/start</code> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "<code>/help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π\n"
        "<code>/weather [–≥–æ—Ä–æ–¥]</code> - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>/weather –ú–æ—Å–∫–≤–∞</code>)\n"
        "<code>/news</code> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)\n"
        "<code>/events [–≥–æ—Ä–æ–¥]</code> - –£–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>/events —Å–ø–±</code>). –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —Å–º. –≤ /events –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.\n"
        "<code>/subscribe</code> - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "<code>/mysubscriptions</code> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "<code>/unsubscribe</code> - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n" 
        "<code>/cancel</code> - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å–∫—É)\n"
    )
    await message.answer(help_text)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")


@dp.message(Command('weather'))
async def process_weather_command(message: types.Message, command: CommandObject):
    city_name = command.args
    user_id = message.from_user.id
    if not city_name:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞...")
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")
    await message.reply(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name)}</b>...")
    weather_data = await get_weather_data(city_name.strip())
    if weather_data and not weather_data.get("error"):
        try:
            description = weather_data['weather'][0]['description'].capitalize(); temp = weather_data['main']['temp']
            feels_like = weather_data['main']['feels_like']; humidity = weather_data['main']['humidity']
            wind_speed = weather_data['wind']['speed']; wind_deg = weather_data['wind'].get('deg')
            wind_direction_str = ""
            if wind_deg is not None:
                directions = ["–°–µ–≤–µ—Ä–Ω—ã–π", "–°-–í", "–í–æ—Å—Ç–æ—á–Ω—ã–π", "–Æ-–í", "–Æ–∂–Ω—ã–π", "–Æ-–ó", "–ó–∞–ø–∞–¥–Ω—ã–π", "–°-–ó"]
                wind_direction_str = f", {directions[int((wind_deg % 360) / 45)]}"
            response_text = (
                f"<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {html.escape(weather_data.get('name', city_name))}:</b>\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å{wind_direction_str}\n‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )
            await message.answer(response_text)
        except Exception: await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
    elif weather_data and weather_data.get("error"): await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É: {html.escape(weather_data.get('message', '–û—à–∏–±–∫–∞'))}")
    else: await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")


@dp.message(Command('news'))
async def process_news_command(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ—Å—Ç–∏.")
    await message.reply("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
    articles_or_error = await get_top_headlines(country="ru", page_size=5)
    if isinstance(articles_or_error, list) and articles_or_error:
        response_lines = ["<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è):</b>"]
        for i, article in enumerate(articles_or_error):
            title = html.escape(article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')); url = article.get('url', '#')
            source = article.get('source', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
            response_lines.append(f"{i+1}. <a href='{url}'>{title}</a> ({source})")
        await message.answer("\n".join(response_lines), disable_web_page_preview=True)
    elif isinstance(articles_or_error, list): await message.reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
    elif isinstance(articles_or_error, dict) and articles_or_error.get("error"): await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {html.escape(articles_or_error.get('message', '–û—à–∏–±–∫–∞'))}")
    else: await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö...")


@dp.message(Command('events'))
async def process_events_command(message: types.Message, command: CommandObject):
    city_arg = command.args; user_id = message.from_user.id
    if not city_arg: await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥...\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥..."); return
    location_slug = KUDAGO_LOCATION_SLUGS.get(city_arg.strip().lower())
    if not location_slug: await message.reply(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –∑–Ω–∞—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_arg)}'...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥..."); return
    await message.reply(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg)}</b>...")
    events_result = await get_kudago_events(location=location_slug, page_size=5)
    if isinstance(events_result, list) and events_result:
        response_lines = [f"<b>üéâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {html.escape(city_arg.capitalize())}:</b>"]
        for i, event in enumerate(events_result):
            title = html.escape(event.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')); site_url = event.get('site_url', '#')
            description_raw = event.get('description', ''); description = html.unescape(description_raw.replace('<p>', '').replace('</p>', '').replace('<br>', '\n')).strip()
            event_str = f"{i+1}. <a href='{site_url}'>{title}</a>"
            if description:
                max_desc_len = 100
                if len(description) > max_desc_len: description = description[:max_desc_len] + "..."
                event_str += f"\n   <i>{html.escape(description)}</i>"
            response_lines.append(event_str)
        await message.answer("\n\n".join(response_lines), disable_web_page_preview=True)
    elif isinstance(events_result, list): await message.reply(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg)}</b>.")
    elif isinstance(events_result, dict) and events_result.get("error"): await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è: {html.escape(events_result.get('message', '–û—à–∏–±–∫–∞'))}")
    else: await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö...")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è /subscribe –∏ FSM ---

INFO_TYPE_WEATHER = "weather"
INFO_TYPE_NEWS = "news"
INFO_TYPE_EVENTS = "events"

@dp.message(Command('subscribe'), StateFilter(None))
async def process_subscribe_command_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /subscribe.")
    keyboard_buttons = [
        [InlineKeyboardButton(text="üå¶Ô∏è –ü–æ–≥–æ–¥–∞", callback_data=f"subscribe_type:{INFO_TYPE_WEATHER}")],
        [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)", callback_data=f"subscribe_type:{INFO_TYPE_NEWS}")],
        [InlineKeyboardButton(text="üéâ –°–æ–±—ã—Ç–∏—è", callback_data=f"subscribe_type:{INFO_TYPE_EVENTS}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="subscribe_fsm_cancel")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer("–ù–∞ –∫–∞–∫–æ–π —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=keyboard)
    await state.set_state(SubscriptionStates.choosing_info_type)

@dp.callback_query(StateFilter(SubscriptionStates.choosing_info_type), F.data.startswith("subscribe_type:"))
async def process_info_type_choice(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    selected_type = callback_query.data.split(":")[1]; user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {selected_type}")
    await state.update_data(info_type=selected_type)
    if selected_type == INFO_TYPE_WEATHER:
        await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü–æ–≥–æ–¥–∞'.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞...")
        await state.set_state(SubscriptionStates.entering_city_weather)
    elif selected_type == INFO_TYPE_EVENTS:
        await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–°–æ–±—ã—Ç–∏—è'.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞, —Å–ø–±).")
        await state.set_state(SubscriptionStates.entering_city_events)
    elif selected_type == INFO_TYPE_NEWS:
        frequency = "daily"; user_id = callback_query.from_user.id
        with next(get_session()) as db_session:
            db_user = create_user_if_not_exists(db_session, user_id)
            existing_subscription = get_subscription_by_user_and_type(db_session, db_user.id, INFO_TYPE_NEWS)
            if existing_subscription: await callback_query.message.edit_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '–ù–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)'.")
            else:
                create_subscription(db_session, db_user.id, INFO_TYPE_NEWS, frequency)
                await callback_query.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '–ù–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)' —Å —á–∞—Å—Ç–æ—Ç–æ–π '{frequency}'.")
        await state.clear()

@dp.callback_query(StateFilter(SubscriptionStates.choosing_info_type), F.data == "subscribe_fsm_cancel")
async def callback_fsm_cancel_process(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞'.")
    await callback_query.answer()
    await callback_query.message.edit_text("–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()

@dp.message(StateFilter(SubscriptionStates.entering_city_weather), F.text)
async def process_city_for_weather_subscription(message: types.Message, state: FSMContext):
    city_name = message.text.strip(); user_id = message.from_user.id
    user_data = await state.get_data(); info_type = user_data.get("info_type")
    if not city_name: await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º..."); return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –≥–æ—Ä–æ–¥ '{city_name}' –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ '{info_type}'.")
    frequency = "daily"
    with next(get_session()) as db_session:
        db_user = create_user_if_not_exists(db_session, user_id)
        existing_subscription = get_subscription_by_user_and_type(db_session, db_user.id, info_type, city_name)
        if existing_subscription: await message.answer(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '{info_type}' –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_name)}'.")
        else:
            create_subscription(db_session, db_user.id, info_type, frequency, city_name)
            await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '{info_type}' –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_name)}' —Å —á–∞—Å—Ç–æ—Ç–æ–π '{frequency}'.")
    await state.clear()

@dp.message(StateFilter(SubscriptionStates.entering_city_events), F.text)
async def process_city_for_events_subscription(message: types.Message, state: FSMContext):
    city_arg = message.text.strip(); user_id = message.from_user.id
    user_data = await state.get_data(); info_type = user_data.get("info_type")
    if not city_arg: await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º..."); return
    location_slug = KUDAGO_LOCATION_SLUGS.get(city_arg.lower())
    if not location_slug:
        await message.reply(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –∑–Ω–∞—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_arg)}'...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥...")
        return # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –≥–æ—Ä–æ–¥ '{city_arg}' (slug: {location_slug}) –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ '{info_type}'.")
    frequency = "daily"
    with next(get_session()) as db_session:
        db_user = create_user_if_not_exists(db_session, user_id)
        existing_subscription = get_subscription_by_user_and_type(db_session, db_user.id, info_type, location_slug)
        if existing_subscription: await message.answer(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '{info_type}' –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_arg)}'.")
        else:
            create_subscription(db_session, db_user.id, info_type, frequency, location_slug)
            await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '{info_type}' –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_arg)}' —Å —á–∞—Å—Ç–æ—Ç–æ–π '{frequency}'.")
    await state.clear()

# --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ ---

@dp.message(Command('mysubscriptions'))
async def process_mysubscriptions_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mysubscriptions.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    user_id_telegram = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_telegram} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π /mysubscriptions.")

    with next(get_session()) as db_session:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
        db_user = get_user_by_telegram_id(session=db_session, telegram_id=user_id_telegram)

        if not db_user:
            # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ /start –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º,
            # –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä—è–µ–º.
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start.")
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user_id_telegram} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /mysubscriptions.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscriptions = get_subscriptions_by_user_id(session=db_session, user_id=db_user.id)

        if not subscriptions:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n"
                                 "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscribe.")
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_telegram} (DB ID: {db_user.id}) –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        response_lines = ["<b>üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>"]
        for i, sub in enumerate(subscriptions):
            sub_details_str = ""
            if sub.info_type == INFO_TYPE_WEATHER:
                sub_details_str = f"–ü–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: <b>{html.escape(sub.details or '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>"
            elif sub.info_type == INFO_TYPE_NEWS:
                sub_details_str = "–ù–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)"
            elif sub.info_type == INFO_TYPE_EVENTS:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ slug'—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                city_display_name = sub.details # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é slug
                for name, slug_val in KUDAGO_LOCATION_SLUGS.items():
                    if slug_val == sub.details:
                        city_display_name = name.capitalize()
                        break
                sub_details_str = f"–°–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ: <b>{html.escape(city_display_name)}</b>"
            else:
                sub_details_str = f"–¢–∏–ø: {html.escape(sub.info_type)}"
                if sub.details:
                    sub_details_str += f", –î–µ—Ç–∞–ª–∏: {html.escape(sub.details)}"

            frequency_str = f"(–ß–∞—Å—Ç–æ—Ç–∞: {html.escape(sub.frequency or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')})"
            # –ü–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø–∏—Å–∫–∏, —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ —Å –∫–æ–º–∞–Ω–¥–æ–π /unsubscribe
            response_lines.append(f"{i+1}. {sub_details_str} {frequency_str}")

        response_text = "\n".join(response_lines)
        await message.answer(response_text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_telegram} (DB ID: {db_user.id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫.")


@dp.message(Command('unsubscribe'))
async def process_unsubscribe_command_start(message: types.Message,
                                            state: FSMContext):  # –î–æ–±–∞–≤–ª—è–µ–º state, —Ç.–∫. —ç—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å FSM
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø–∏—Å–∫–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.
    """
    user_id_telegram = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_telegram} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /unsubscribe.")

    with next(get_session()) as db_session:
        db_user = get_user_by_telegram_id(session=db_session, telegram_id=user_id_telegram)
        if not db_user:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start.")
            return

        subscriptions = get_subscriptions_by_user_id(session=db_session, user_id=db_user.id)

        if not subscriptions:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return

        keyboard_buttons = []
        for sub in subscriptions:
            sub_details_str = ""
            if sub.info_type == INFO_TYPE_WEATHER:
                sub_details_str = f"–ü–æ–≥–æ–¥–∞: {html.escape(sub.details or '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')}"
            elif sub.info_type == INFO_TYPE_NEWS:
                sub_details_str = "–ù–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)"
            elif sub.info_type == INFO_TYPE_EVENTS:
                city_display_name = sub.details
                for name, slug_val in KUDAGO_LOCATION_SLUGS.items():
                    if slug_val == sub.details: city_display_name = name.capitalize(); break
                sub_details_str = f"–°–æ–±—ã—Ç–∏—è: {html.escape(city_display_name)}"
            else:
                sub_details_str = f"{html.escape(sub.info_type)}"
                if sub.details: sub_details_str += f", {html.escape(sub.details)}"

            # callback_data –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –µ–µ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard_buttons.append(
                [InlineKeyboardButton(text=f"‚ùå {sub_details_str} (–µ–∂–µ–¥–Ω.)",  # –ü–æ–∫–∞ —á–∞—Å—Ç–æ—Ç–∞ '–µ–∂–µ–¥–Ω.' –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–∞
                                      callback_data=f"unsubscribe_confirm:{sub.id}")]
            )

        if not keyboard_buttons:  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return

        keyboard_buttons.append(
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data="unsubscribe_action_cancel")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:", reply_markup=keyboard)
        # –ü–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø–∏—Å–∫–∏ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç)
@dp.callback_query(F.data.startswith("unsubscribe_confirm:"))
async def process_unsubscribe_confirm(callback_query: types.CallbackQuery, state: FSMContext):  # –î–æ–±–∞–≤–∏–ª–∏ state
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø–∏—Å–∫–∏. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.
    """
    await callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    subscription_id_to_delete = int(callback_query.data.split(":")[1])
    user_id_telegram = callback_query.from_user.id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_telegram} –≤—ã–±—Ä–∞–ª –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ ID: {subscription_id_to_delete}")

    with next(get_session()) as db_session:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —ç—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?
        db_user = get_user_by_telegram_id(session=db_session, telegram_id=user_id_telegram)
        if not db_user:
            await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        subscription_to_check = db_session.get(Subscription, subscription_id_to_delete)
        if not subscription_to_check or subscription_to_check.user_id != db_user.id:
            await callback_query.message.edit_text("–û—à–∏–±–∫–∞: —ç—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logger.warning(
                f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —á—É–∂–æ–π/–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ ID {subscription_id_to_delete} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id_telegram}")
            return

        success = delete_subscription(session=db_session, subscription_id=subscription_id_to_delete)

        if success:
            await callback_query.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.")
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_telegram} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ID {subscription_id_to_delete}.")
        else:
            # –≠—Ç–∞ –≤–µ—Ç–∫–∞ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–∞, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—à–µ –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
            logger.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_telegram} –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ID {subscription_id_to_delete} (delete_subscription –≤–µ—Ä–Ω—É–ª False).")

    # –ï—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª FSM, –∑–¥–µ—Å—å –±—ã –±—ã–ª state.clear()


# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é" –≤ /unsubscribe
@dp.callback_query(F.data == "unsubscribe_action_cancel")
async def process_unsubscribe_action_cancel(callback_query: types.CallbackQuery, state: FSMContext):  # –î–æ–±–∞–≤–∏–ª–∏ state
    await callback_query.answer()
    await callback_query.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏.")

# --- –§—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞ ---
async def on_startup():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    create_db_and_tables()
    commands_to_set = [
        types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        types.BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        types.BotCommand(command="weather", description="‚òÄÔ∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É (–≥–æ—Ä–æ–¥)"),
        types.BotCommand(command="news", description="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)"),
        types.BotCommand(command="events", description="üéâ –°–æ–±—ã—Ç–∏—è (–≥–æ—Ä–æ–¥)"),
        types.BotCommand(command="subscribe", description="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"),
        types.BotCommand(command="mysubscriptions", description="üìú –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
        types.BotCommand(command="unsubscribe", description="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"),
        types.BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
    ]
    try:
        await bot.set_my_commands(commands_to_set)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –º–µ–Ω—é Telegram.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

async def on_shutdown():
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == '__main__':
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    asyncio.run(dp.start_polling(bot, skip_updates=True))