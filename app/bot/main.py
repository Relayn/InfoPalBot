"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ InfoPalBot.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ù–∞—Å—Ç—Ä–æ–π–∫—É –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ Bot –∏ Dispatcher –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram.
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤) –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π.
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (on_startup)
  –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã (on_shutdown) –±–æ—Ç–∞.
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á APScheduler.
- –£—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞.
- –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram.
"""
import logging
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.config import settings
from app.scheduler.main import set_bot_instance, schedule_jobs, scheduler as aps_scheduler, shutdown_scheduler

from app.bot.handlers import basic, info_requests, subscription, profile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=settings.LOG_LEVEL.upper(),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
default_bot_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=default_bot_properties)
dp = Dispatcher()


async def on_startup():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞
    commands_to_set = [
        types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        types.BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        types.BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
        types.BotCommand(command="weather", description="‚òÄÔ∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É (–≥–æ—Ä–æ–¥)"),
        types.BotCommand(command="news", description="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)"),
        types.BotCommand(command="events", description="üéâ –°–æ–±—ã—Ç–∏—è (–≥–æ—Ä–æ–¥)"),
        types.BotCommand(command="subscribe", description="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"),
        types.BotCommand(command="mysubscriptions", description="üìú –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç–∞—Ä—ã–π)"),
        types.BotCommand(command="unsubscribe", description="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è (—Å—Ç–∞—Ä—ã–π)"),
        types.BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
    ]
    try:
        await bot.set_my_commands(commands_to_set)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}", exc_info=True)

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    set_bot_instance(bot)
    schedule_jobs()
    if not aps_scheduler.running:
        aps_scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler –∑–∞–ø—É—â–µ–Ω.")

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")


def on_shutdown():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
    """
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    shutdown_scheduler()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ –º–æ–¥—É–ª–µ–π handlers
    dp.include_router(basic.router)
    dp.include_router(info_requests.router)
    dp.include_router(subscription.router)
    dp.include_router(profile.router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    asyncio.run(dp.start_polling(bot, skip_updates=True))


if __name__ == "__main__":
    main()