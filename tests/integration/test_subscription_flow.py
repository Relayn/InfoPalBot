# –§–∞–π–ª tests/integration/test_subscription_flow.py

import pytest
import html
from unittest.mock import AsyncMock, MagicMock, patch, ANY
from typing import Optional

from sqlmodel import Session, select

from app.bot.main import (
    process_subscribe_command_start,
    process_info_type_choice,
    SubscriptionStates,
)
from app.config import settings as app_settings
from app.database.models import Log, User as DBUser, Subscription
from app.database.crud import create_user, get_subscription_by_user_and_type
from app.bot.constants import INFO_TYPE_NEWS, INFO_TYPE_WEATHER, INFO_TYPE_EVENTS, KUDAGO_LOCATION_SLUGS
from aiogram.types import Message, User as AiogramUser, Chat, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from app.bot.main import process_city_for_weather_subscription
from app.bot.main import process_city_for_events_subscription
from app.bot.main import callback_fsm_cancel_process
from app.bot.main import cmd_cancel_any_state # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
from aiogram.types import ReplyKeyboardRemove # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock FSMContext
async def get_mock_fsm_context(initial_state: Optional[SubscriptionStates] = None,
                               initial_data: Optional[dict] = None) -> FSMContext:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫ FSMContext —Å MemoryStorage."""
    storage = MemoryStorage()
    state = FSMContext(storage=storage, key=MagicMock(chat_id=123, user_id=123, bot_id=42))
    if initial_state:
        await state.set_state(initial_state)
    if initial_data:
        await state.set_data(initial_data)
    return state


@pytest.mark.asyncio
async def test_subscribe_to_news_successful_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —É—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: /subscribe -> –≤—ã–±–æ—Ä —Ç–∏–ø–∞ "–ù–æ–≤–æ—Å—Ç–∏" -> —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î -> –æ—á–∏—Å—Ç–∫–∞ FSM.
    """
    telegram_user_id = 777001

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscribe ---
    mock_message_subscribe = AsyncMock(spec=Message)
    mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="Subscriber User")
    mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_subscribe.answer = AsyncMock()

    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    mock_fsm_context_subscribe = await get_mock_fsm_context()
    mock_fsm_context_subscribe.set_state = AsyncMock()  # –ú–æ–∫–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞
    mock_fsm_context_subscribe.get_state = AsyncMock(return_value=None)

    mock_session_cm_subscribe = MagicMock()
    mock_session_cm_subscribe.__enter__.return_value = integration_session
    mock_session_cm_subscribe.__exit__ = MagicMock(return_value=None)
    mock_generator_subscribe = MagicMock()
    mock_generator_subscribe.__next__.return_value = mock_session_cm_subscribe

    with patch('app.bot.main.get_session', return_value=mock_generator_subscribe):
        await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_subscribe)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 1
    mock_message_subscribe.answer.assert_called_once()
    args_subscribe, kwargs_subscribe = mock_message_subscribe.answer.call_args
    assert "–ù–∞ –∫–∞–∫–æ–π —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è?" in args_subscribe[0]
    assert isinstance(kwargs_subscribe['reply_markup'], InlineKeyboardMarkup)

    news_button_found = False
    for row in kwargs_subscribe['reply_markup'].inline_keyboard:
        for button in row:
            if button.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)" and button.callback_data == f"subscribe_type:{INFO_TYPE_NEWS}":
                news_button_found = True
                break
        if news_button_found:
            break
    assert news_button_found, "–ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    mock_fsm_context_subscribe.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)

    log_entry_step1 = integration_session.exec(
        select(Log).where(Log.command == "/subscribe").where(Log.user_id == db_user.id)
    ).first()
    assert log_entry_step1 is not None
    assert log_entry_step1.details == "Start subscription process"

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç "–ù–æ–≤–æ—Å—Ç–∏" ---
    mock_callback_query_news = AsyncMock(spec=CallbackQuery)
    mock_callback_query_news.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_callback_query_news.data = f"subscribe_type:{INFO_TYPE_NEWS}"
    mock_callback_query_news.message = AsyncMock(spec=Message)
    mock_callback_query_news.message.edit_text = AsyncMock()
    mock_callback_query_news.answer = AsyncMock()

    # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ FSMContext –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_info_type
    # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –Ω–∞—à –º–æ–∫-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä FSMContext
    # –ò —Ç–∞–∫–∂–µ –º–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–∑–≤–∞–Ω—ã –≤ process_info_type_choice
    mock_fsm_context_callback = await get_mock_fsm_context(
        initial_state=SubscriptionStates.choosing_info_type
    )
    mock_fsm_context_callback.update_data = AsyncMock()
    mock_fsm_context_callback.clear = AsyncMock()

    mock_session_cm_callback = MagicMock()
    mock_session_cm_callback.__enter__.return_value = integration_session
    mock_session_cm_callback.__exit__ = MagicMock(return_value=None)
    mock_generator_callback = MagicMock()
    mock_generator_callback.__next__.return_value = mock_session_cm_callback

    with patch('app.bot.main.get_session', return_value=mock_generator_callback):
        await process_info_type_choice(mock_callback_query_news, mock_fsm_context_callback)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
    mock_callback_query_news.answer.assert_called_once()
    mock_fsm_context_callback.update_data.assert_called_once_with(info_type=INFO_TYPE_NEWS)

    mock_callback_query_news.message.edit_text.assert_called_once()
    args_edit, _ = mock_callback_query_news.message.edit_text.call_args
    assert "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '–ù–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)'" in args_edit[0]
    assert "daily" in args_edit[0]

    subscription_in_db = get_subscription_by_user_and_type(
        session=integration_session, user_id=db_user.id, info_type=INFO_TYPE_NEWS
    )
    assert subscription_in_db is not None
    assert subscription_in_db.status == "active"
    assert subscription_in_db.frequency == "daily"
    assert subscription_in_db.details is None

    mock_fsm_context_callback.clear.assert_called_once()

    log_entries_step2 = integration_session.exec(
        select(Log).where(Log.user_id == db_user.id).order_by(Log.timestamp.desc()).limit(2)
    ).all()

    assert len(log_entries_step2) >= 2

    log_confirm_found = any(
        entry.command == "subscribe_confirm" and
        entry.details == f"Type: {INFO_TYPE_NEWS}, Freq: daily"
        for entry in log_entries_step2
    )
    log_type_selected_found = any(
        entry.command == "subscribe_type_selected" and
        entry.details == f"Type chosen: {INFO_TYPE_NEWS}"
        for entry in log_entries_step2
    )
    assert log_confirm_found, "–õ–æ–≥ 'subscribe_confirm' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    assert log_type_selected_found, "–õ–æ–≥ 'subscribe_type_selected' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"


# –§–∞–π–ª tests/integration/test_subscription_flow.py
# ... (–∏–º–ø–æ—Ä—Ç—ã, get_mock_fsm_context –∏ —Ç–µ—Å—Ç test_subscribe_to_news_successful_flow –∫–∞–∫ –µ—Å—Ç—å) ...

@pytest.mark.asyncio
async def test_subscribe_to_news_already_subscribed_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: /subscribe -> –≤—ã–±–æ—Ä "–ù–æ–≤–æ—Å—Ç–∏" -> —Å–æ–æ–±—â–µ–Ω–∏–µ "—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω" -> –Ω–µ—Ç –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î.
    """
    telegram_user_id = 777002
    default_frequency = "daily"  # –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ main.py

    # --- –®–∞–≥ 0: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ ---
    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)
    # –°–æ–∑–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    existing_sub = Subscription(
        user_id=db_user.id,
        info_type=INFO_TYPE_NEWS,
        frequency=default_frequency,
        details=None,  # –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–µ—Ç–∞–ª–∏ –Ω–µ –≤–∞–∂–Ω—ã
        status="active"
    )
    integration_session.add(existing_sub)
    integration_session.commit()
    integration_session.refresh(existing_sub)

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscribe ---
    mock_message_subscribe = AsyncMock(spec=Message)
    mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="AlreadySub User")
    mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_subscribe.answer = AsyncMock()

    mock_fsm_context_subscribe = await get_mock_fsm_context()
    mock_fsm_context_subscribe.set_state = AsyncMock()
    mock_fsm_context_subscribe.get_state = AsyncMock(return_value=None)

    mock_session_cm_subscribe = MagicMock()
    mock_session_cm_subscribe.__enter__.return_value = integration_session
    mock_session_cm_subscribe.__exit__ = MagicMock(return_value=None)
    mock_generator_subscribe = MagicMock()
    mock_generator_subscribe.__next__.return_value = mock_session_cm_subscribe

    with patch('app.bot.main.get_session', return_value=mock_generator_subscribe):
        await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_subscribe)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 1 (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç —à–∞–≥ —É–∂–µ –ø–æ–∫—Ä—ã—Ç –¥—Ä—É–≥–∏–º —Ç–µ—Å—Ç–æ–º)
    mock_message_subscribe.answer.assert_called_once()
    mock_fsm_context_subscribe.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç "–ù–æ–≤–æ—Å—Ç–∏" ---
    mock_callback_query_news = AsyncMock(spec=CallbackQuery)
    mock_callback_query_news.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_callback_query_news.data = f"subscribe_type:{INFO_TYPE_NEWS}"
    mock_callback_query_news.message = AsyncMock(spec=Message)
    mock_callback_query_news.message.edit_text = AsyncMock()
    mock_callback_query_news.answer = AsyncMock()

    mock_fsm_context_callback = await get_mock_fsm_context(
        initial_state=SubscriptionStates.choosing_info_type
    )
    mock_fsm_context_callback.update_data = AsyncMock()  # –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω
    mock_fsm_context_callback.clear = AsyncMock()  # –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω

    mock_session_cm_callback = MagicMock()
    mock_session_cm_callback.__enter__.return_value = integration_session
    mock_session_cm_callback.__exit__ = MagicMock(return_value=None)
    mock_generator_callback = MagicMock()
    mock_generator_callback.__next__.return_value = mock_session_cm_callback

    with patch('app.bot.main.get_session', return_value=mock_generator_callback):
        await process_info_type_choice(mock_callback_query_news, mock_fsm_context_callback)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
    mock_callback_query_news.answer.assert_called_once()
    mock_fsm_context_callback.update_data.assert_called_once_with(info_type=INFO_TYPE_NEWS)

    mock_callback_query_news.message.edit_text.assert_called_once()
    args_edit, _ = mock_callback_query_news.message.edit_text.call_args
    assert "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '–ù–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)'." in args_edit[0]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ù–û–í–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞ (–¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞)
    all_news_subscriptions = integration_session.exec(
        select(Subscription).where(
            Subscription.user_id == db_user.id,
            Subscription.info_type == INFO_TYPE_NEWS,
            Subscription.status == "active"
        )
    ).all()
    assert len(all_news_subscriptions) == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏"
    assert all_news_subscriptions[0].id == existing_sub.id  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Ç–∞ –∂–µ —Å–∞–º–∞—è –ø–æ–¥–ø–∏—Å–∫–∞

    mock_fsm_context_callback.clear.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –¥–ª—è —à–∞–≥–∞ 2
    log_entries_step2 = integration_session.exec(
        select(Log).where(Log.user_id == db_user.id).order_by(Log.timestamp.desc()).limit(2)
    ).all()

    # –û–∂–∏–¥–∞–µ–º –ª–æ–≥ –æ –ø–æ–ø—ã—Ç–∫–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–æ–≥ –æ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞
    log_duplicate_found = any(
        entry.command == "subscribe_attempt_duplicate" and
        entry.details == f"Type: {INFO_TYPE_NEWS}"
        for entry in log_entries_step2
    )
    log_type_selected_found = any(
        entry.command == "subscribe_type_selected" and
        entry.details == f"Type chosen: {INFO_TYPE_NEWS}"
        for entry in log_entries_step2
    )
    assert log_duplicate_found, "–õ–æ–≥ 'subscribe_attempt_duplicate' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    assert log_type_selected_found, "–õ–æ–≥ 'subscribe_type_selected' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"


@pytest.mark.asyncio
async def test_subscribe_to_weather_successful_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —É—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–≥–æ–¥—É.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: /subscribe -> –≤—ã–±–æ—Ä "–ü–æ–≥–æ–¥–∞" -> –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ -> —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î -> –æ—á–∏—Å—Ç–∫–∞ FSM.
    """
    telegram_user_id = 777003
    city_to_subscribe = "–õ–æ–Ω–¥–æ–Ω"
    default_frequency = "daily"

    # --- –®–∞–≥ 0: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscribe ---
    mock_message_subscribe = AsyncMock(spec=Message)
    mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="Weather Sub User")
    mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_subscribe.answer = AsyncMock()

    mock_fsm_context_step1 = await get_mock_fsm_context()
    mock_fsm_context_step1.set_state = AsyncMock()  # –ú–æ–∫–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞
    # get_state –Ω–µ –º–æ–∫–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —Ç.–∫. process_subscribe_command_start –Ω–µ —á–∏—Ç–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    mock_session_cm_step1 = MagicMock()
    mock_session_cm_step1.__enter__.return_value = integration_session
    mock_session_cm_step1.__exit__ = MagicMock(return_value=None)
    mock_generator_step1 = MagicMock()
    mock_generator_step1.__next__.return_value = mock_session_cm_step1

    with patch('app.bot.main.get_session', return_value=mock_generator_step1):
        await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_step1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 1
    mock_message_subscribe.answer.assert_called_once()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª
    mock_fsm_context_step1.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)
    # –õ–æ–≥ –¥–ª—è —à–∞–≥–∞ 1
    log_step1 = integration_session.exec(
        select(Log).where(Log.user_id == db_user.id, Log.command == "/subscribe")
    ).first()
    assert log_step1 and log_step1.details == "Start subscription process"

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç "–ü–æ–≥–æ–¥–∞" ---
    mock_callback_query_weather = AsyncMock(spec=CallbackQuery)
    mock_callback_query_weather.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_callback_query_weather.data = f"subscribe_type:{INFO_TYPE_WEATHER}"
    mock_callback_query_weather.message = AsyncMock(spec=Message)
    mock_callback_query_weather.message.edit_text = AsyncMock()
    mock_callback_query_weather.answer = AsyncMock()

    # FSMContext –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_info_type
    mock_fsm_context_step2 = await get_mock_fsm_context(initial_state=SubscriptionStates.choosing_info_type)
    mock_fsm_context_step2.update_data = AsyncMock()
    mock_fsm_context_step2.set_state = AsyncMock()  # –ú–æ–∫–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    mock_session_cm_step2 = MagicMock()
    mock_session_cm_step2.__enter__.return_value = integration_session
    mock_session_cm_step2.__exit__ = MagicMock(return_value=None)
    mock_generator_step2 = MagicMock()
    mock_generator_step2.__next__.return_value = mock_session_cm_step2

    with patch('app.bot.main.get_session', return_value=mock_generator_step2):
        await process_info_type_choice(mock_callback_query_weather, mock_fsm_context_step2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
    mock_callback_query_weather.answer.assert_called_once()
    mock_fsm_context_step2.update_data.assert_called_once_with(info_type=INFO_TYPE_WEATHER)
    mock_callback_query_weather.message.edit_text.assert_called_once_with(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü–æ–≥–æ–¥–∞'.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞..."
    )
    mock_fsm_context_step2.set_state.assert_called_once_with(SubscriptionStates.entering_city_weather)
    # –õ–æ–≥ –¥–ª—è —à–∞–≥–∞ 2
    log_step2 = integration_session.exec(
        select(Log).where(Log.user_id == db_user.id, Log.command == "subscribe_type_selected")
    ).first()
    assert log_step2 and log_step2.details == f"Type chosen: {INFO_TYPE_WEATHER}"

    # --- –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ---
    mock_message_city_input = AsyncMock(spec=Message)
    mock_message_city_input.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_message_city_input.chat = MagicMock(spec=Chat, id=telegram_user_id)  # –ù—É–∂–µ–Ω –¥–ª—è reply/answer
    mock_message_city_input.text = city_to_subscribe
    mock_message_city_input.answer = AsyncMock()  # –î–ª—è –æ—Ç–≤–µ—Ç–∞ –æ–± —É—Å–ø–µ—Ö–µ

    # FSMContext –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ entering_city_weather
    # –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å info_type –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    mock_fsm_context_step3 = await get_mock_fsm_context(
        initial_state=SubscriptionStates.entering_city_weather,
        initial_data={'info_type': INFO_TYPE_WEATHER}
    )
    mock_fsm_context_step3.clear = AsyncMock()  # –ú–æ–∫–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    mock_session_cm_step3 = MagicMock()
    mock_session_cm_step3.__enter__.return_value = integration_session
    mock_session_cm_step3.__exit__ = MagicMock(return_value=None)
    mock_generator_step3 = MagicMock()
    mock_generator_step3.__next__.return_value = mock_session_cm_step3

    with patch('app.bot.main.get_session', return_value=mock_generator_step3):
        await process_city_for_weather_subscription(mock_message_city_input, mock_fsm_context_step3)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 3
    mock_message_city_input.answer.assert_called_once_with(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '{INFO_TYPE_WEATHER}' –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_to_subscribe)}' —Å —á–∞—Å—Ç–æ—Ç–æ–π '{default_frequency}'."
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
    subscription_in_db = get_subscription_by_user_and_type(
        session=integration_session,
        user_id=db_user.id,
        info_type=INFO_TYPE_WEATHER,
        details=city_to_subscribe
    )
    assert subscription_in_db is not None
    assert subscription_in_db.status == "active"
    assert subscription_in_db.frequency == default_frequency
    assert subscription_in_db.details == city_to_subscribe

    mock_fsm_context_step3.clear.assert_called_once()

    # –õ–æ–≥ –¥–ª—è —à–∞–≥–∞ 3
    log_step3 = integration_session.exec(
        select(Log).where(Log.user_id == db_user.id, Log.command == "subscribe_confirm")
    ).first()
    assert log_step3 is not None
    assert log_step3.details == f"Type: {INFO_TYPE_WEATHER}, City: {city_to_subscribe}, Freq: {default_frequency}"


@pytest.mark.asyncio
async def test_subscribe_to_events_successful_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —É—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: /subscribe -> –≤—ã–±–æ—Ä "–°–æ–±—ã—Ç–∏—è" -> –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ -> —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î -> –æ—á–∏—Å—Ç–∫–∞ FSM.
    """
    telegram_user_id = 777004
    city_input_by_user = "–ú–æ—Å–∫–≤–∞"  # –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç
    expected_location_slug = KUDAGO_LOCATION_SLUGS[city_input_by_user.lower()]
    default_frequency = "daily"

    # --- –®–∞–≥ 0: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscribe ---
    mock_message_subscribe = AsyncMock(spec=Message)
    mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="Events Sub User")
    mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_subscribe.answer = AsyncMock()

    mock_fsm_context_step1 = await get_mock_fsm_context()
    mock_fsm_context_step1.set_state = AsyncMock()

    mock_session_cm_step1 = MagicMock()
    mock_session_cm_step1.__enter__.return_value = integration_session
    mock_session_cm_step1.__exit__ = MagicMock(return_value=None)
    mock_generator_step1 = MagicMock()
    mock_generator_step1.__next__.return_value = mock_session_cm_step1

    with patch('app.bot.main.get_session', return_value=mock_generator_step1):
        await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_step1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 1
    mock_message_subscribe.answer.assert_called_once()
    mock_fsm_context_step1.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)
    log_step1 = integration_session.exec(
        select(Log).where(Log.user_id == db_user.id, Log.command == "/subscribe")
    ).first()
    assert log_step1 and log_step1.details == "Start subscription process"

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç "–°–æ–±—ã—Ç–∏—è" ---
    mock_callback_query_events = AsyncMock(spec=CallbackQuery)
    mock_callback_query_events.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_callback_query_events.data = f"subscribe_type:{INFO_TYPE_EVENTS}"
    mock_callback_query_events.message = AsyncMock(spec=Message)
    mock_callback_query_events.message.edit_text = AsyncMock()
    mock_callback_query_events.answer = AsyncMock()

    mock_fsm_context_step2 = await get_mock_fsm_context(initial_state=SubscriptionStates.choosing_info_type)
    mock_fsm_context_step2.update_data = AsyncMock()
    mock_fsm_context_step2.set_state = AsyncMock()

    mock_session_cm_step2 = MagicMock()
    mock_session_cm_step2.__enter__.return_value = integration_session
    mock_session_cm_step2.__exit__ = MagicMock(return_value=None)
    mock_generator_step2 = MagicMock()
    mock_generator_step2.__next__.return_value = mock_session_cm_step2

    with patch('app.bot.main.get_session', return_value=mock_generator_step2):
        await process_info_type_choice(mock_callback_query_events, mock_fsm_context_step2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
    mock_callback_query_events.answer.assert_called_once()
    mock_fsm_context_step2.update_data.assert_called_once_with(info_type=INFO_TYPE_EVENTS)
    mock_callback_query_events.message.edit_text.assert_called_once_with(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ '–°–æ–±—ã—Ç–∏—è'.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞, —Å–ø–±)."
    )
    mock_fsm_context_step2.set_state.assert_called_once_with(SubscriptionStates.entering_city_events)
    log_step2 = integration_session.exec(
        select(Log).where(Log.user_id == db_user.id, Log.command == "subscribe_type_selected")
    ).first()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞
    assert log_step2 and log_step2.details == f"Type chosen: {INFO_TYPE_EVENTS}"

    # --- –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ---
    mock_message_city_input = AsyncMock(spec=Message)
    mock_message_city_input.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_message_city_input.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_city_input.text = city_input_by_user
    mock_message_city_input.answer = AsyncMock()
    mock_message_city_input.reply = AsyncMock()  # process_city_for_events_subscription –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reply

    mock_fsm_context_step3 = await get_mock_fsm_context(
        initial_state=SubscriptionStates.entering_city_events,
        initial_data={'info_type': INFO_TYPE_EVENTS}
    )
    mock_fsm_context_step3.clear = AsyncMock()

    mock_session_cm_step3 = MagicMock()
    mock_session_cm_step3.__enter__.return_value = integration_session
    mock_session_cm_step3.__exit__ = MagicMock(return_value=None)
    mock_generator_step3 = MagicMock()
    mock_generator_step3.__next__.return_value = mock_session_cm_step3

    with patch('app.bot.main.get_session', return_value=mock_generator_step3):
        await process_city_for_events_subscription(mock_message_city_input, mock_fsm_context_step3)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 3
    mock_message_city_input.answer.assert_called_once_with(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '{INFO_TYPE_EVENTS}' –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_input_by_user)}' —Å —á–∞—Å—Ç–æ—Ç–æ–π '{default_frequency}'."
    )

    subscription_in_db = get_subscription_by_user_and_type(
        session=integration_session,
        user_id=db_user.id,
        info_type=INFO_TYPE_EVENTS,
        details=expected_location_slug  # –í –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è slug
    )
    assert subscription_in_db is not None
    assert subscription_in_db.status == "active"
    assert subscription_in_db.frequency == default_frequency
    assert subscription_in_db.details == expected_location_slug

    mock_fsm_context_step3.clear.assert_called_once()

    log_step3 = integration_session.exec(
        select(Log).where(Log.user_id == db_user.id, Log.command == "subscribe_confirm")
    ).first()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞
    assert log_step3 is not None
    assert log_step3.details == f"Type: {INFO_TYPE_EVENTS}, City: {city_input_by_user} (slug: {expected_location_slug}), Freq: {default_frequency}"

    @pytest.mark.asyncio
    async def test_cancel_subscription_at_type_choice_by_button(integration_session: Session):
        """
        –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞" –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞.
        """
        telegram_user_id = 777005

        # --- –®–∞–≥ 0: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

        # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscribe ---
        mock_message_subscribe = AsyncMock(spec=Message)
        mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id,
                                                     full_name="Cancel User Button")
        mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
        mock_message_subscribe.answer = AsyncMock()

        mock_fsm_context_step1 = await get_mock_fsm_context()
        # –ú–æ–∫–∏—Ä—É–µ–º set_state –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ process_subscribe_command_start
        mock_fsm_context_step1.set_state = AsyncMock()

        mock_session_cm_step1 = MagicMock()
        mock_session_cm_step1.__enter__.return_value = integration_session
        mock_session_cm_step1.__exit__ = MagicMock(return_value=None)
        mock_generator_step1 = MagicMock()
        mock_generator_step1.__next__.return_value = mock_session_cm_step1

        with patch('app.bot.main.get_session', return_value=mock_generator_step1):
            await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_step1)

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 1
        mock_message_subscribe.answer.assert_called_once()
        mock_fsm_context_step1.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)

        # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" ---
        mock_callback_query_cancel = AsyncMock(spec=CallbackQuery)
        mock_callback_query_cancel.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
        mock_callback_query_cancel.data = "subscribe_fsm_cancel"  # –≠—Ç–æ callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        mock_callback_query_cancel.message = AsyncMock(spec=Message)
        mock_callback_query_cancel.message.edit_text = AsyncMock()
        mock_callback_query_cancel.answer = AsyncMock()

        # FSMContext –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_info_type
        mock_fsm_context_step2 = await get_mock_fsm_context(initial_state=SubscriptionStates.choosing_info_type)
        # –ú–æ–∫–∏—Ä—É–µ–º clear –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ –≤—ã–∑–æ–≤–∞
        mock_fsm_context_step2.clear = AsyncMock()

        mock_session_cm_step2 = MagicMock()
        mock_session_cm_step2.__enter__.return_value = integration_session
        mock_session_cm_step2.__exit__ = MagicMock(return_value=None)
        mock_generator_step2 = MagicMock()
        mock_generator_step2.__next__.return_value = mock_session_cm_step2

        with patch('app.bot.main.get_session', return_value=mock_generator_step2):
            await callback_fsm_cancel_process(mock_callback_query_cancel, mock_fsm_context_step2)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
        mock_callback_query_cancel.answer.assert_called_once()
        mock_callback_query_cancel.message.edit_text.assert_called_once_with("–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
        mock_fsm_context_step2.clear.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞ –¥–ª—è —à–∞–≥–∞ 2
        log_step2 = integration_session.exec(
            select(Log)
            .where(Log.user_id == db_user.id)
            .where(Log.command == "subscribe_fsm_cancel")
            .order_by(Log.timestamp.desc())  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ –æ—Ç–º–µ–Ω—ã
        ).first()
        assert log_step2 is not None
        assert log_step2.details == "Cancelled type choice by button"


@pytest.mark.asyncio
async def test_cancel_subscription_at_city_input_by_command(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /cancel –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞.
    """
    telegram_user_id = 777006

    # --- –®–∞–≥ 0: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç "–ü–æ–≥–æ–¥–∞" ---
    #   –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FSM –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é entering_city_weather

    #   –®–∞–≥ 1.1: /subscribe
    mock_message_subscribe = AsyncMock(spec=Message)
    mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="CancelCmd User")
    mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_subscribe.answer = AsyncMock()

    mock_fsm_context_step1_1 = await get_mock_fsm_context()
    mock_fsm_context_step1_1.set_state = AsyncMock()

    mock_session_cm_step1_1 = MagicMock()
    mock_session_cm_step1_1.__enter__.return_value = integration_session
    mock_session_cm_step1_1.__exit__ = MagicMock(return_value=None)
    mock_generator_step1_1 = MagicMock()
    mock_generator_step1_1.__next__.return_value = mock_session_cm_step1_1

    with patch('app.bot.main.get_session', return_value=mock_generator_step1_1):
        await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_step1_1)
    mock_fsm_context_step1_1.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)

    #   –®–∞–≥ 1.2: –í—ã–±–æ—Ä "–ü–æ–≥–æ–¥–∞"
    mock_callback_query_weather = AsyncMock(spec=CallbackQuery)
    mock_callback_query_weather.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_callback_query_weather.data = f"subscribe_type:{INFO_TYPE_WEATHER}"
    mock_callback_query_weather.message = AsyncMock(spec=Message)
    mock_callback_query_weather.message.edit_text = AsyncMock()
    mock_callback_query_weather.answer = AsyncMock()

    # FSMContext –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_info_type,
    # –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–¥—à–∞–≥–µ.
    # –ú—ã —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π mock FSMContext, –Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ–Ω "–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç" –ø—Ä–µ–¥—ã–¥—É—â–∏–π.
    mock_fsm_context_step1_2 = await get_mock_fsm_context(initial_state=SubscriptionStates.choosing_info_type)
    mock_fsm_context_step1_2.update_data = AsyncMock()
    mock_fsm_context_step1_2.set_state = AsyncMock()  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ entering_city_weather

    mock_session_cm_step1_2 = MagicMock()
    mock_session_cm_step1_2.__enter__.return_value = integration_session
    mock_session_cm_step1_2.__exit__ = MagicMock(return_value=None)
    mock_generator_step1_2 = MagicMock()
    mock_generator_step1_2.__next__.return_value = mock_session_cm_step1_2

    with patch('app.bot.main.get_session', return_value=mock_generator_step1_2):
        await process_info_type_choice(mock_callback_query_weather, mock_fsm_context_step1_2)

    mock_fsm_context_step1_2.set_state.assert_called_once_with(SubscriptionStates.entering_city_weather)
    # –£–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ FSM –≥–æ—Ç–æ–≤ –∫ –≤–≤–æ–¥—É –≥–æ—Ä–æ–¥–∞

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel ---
    mock_message_cancel = AsyncMock(spec=Message)
    mock_message_cancel.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_message_cancel.chat = MagicMock(spec=Chat, id=telegram_user_id)  # –ù—É–∂–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    mock_message_cancel.answer = AsyncMock()  # cmd_cancel_any_state –∏—Å–ø–æ–ª—å–∑—É–µ—Ç message.answer

    # FSMContext –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ entering_city_weather
    mock_fsm_context_step2 = await get_mock_fsm_context(initial_state=SubscriptionStates.entering_city_weather)
    # –ú–æ–∫–∏—Ä—É–µ–º get_state, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è cmd_cancel_any_state
    mock_fsm_context_step2.get_state = AsyncMock(return_value=SubscriptionStates.entering_city_weather.state)
    mock_fsm_context_step2.clear = AsyncMock()  # –ú–æ–∫–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—Å—Ç–∫–∏

    mock_direct_context_manager_step2 = MagicMock()
    mock_direct_context_manager_step2.__enter__.return_value = integration_session
    mock_direct_context_manager_step2.__exit__ = MagicMock(return_value=None)

    # –ü–∞—Ç—á–∏–º get_session, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    with patch('app.bot.main.get_session', return_value=mock_direct_context_manager_step2):
        await cmd_cancel_any_state(mock_message_cancel, mock_fsm_context_step2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
    mock_message_cancel.answer.assert_called_once_with(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    mock_fsm_context_step2.clear.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞ –¥–ª—è —à–∞–≥–∞ 2 (–æ—Ç–º–µ–Ω–∞)
    log_step2_cancel = integration_session.exec(
        select(Log)
        .where(Log.user_id == db_user.id)
        .where(Log.command == "/cancel")
        .order_by(Log.timestamp.desc())
    ).first()
    assert log_step2_cancel is not None
    # –í cmd_cancel_any_state state.get_state() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ "SubscriptionStates:entering_city_weather"
    assert log_step2_cancel.details == f"State before cancel: {SubscriptionStates.entering_city_weather.state}"

@pytest.mark.asyncio
async def test_subscribe_to_weather_already_subscribed_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–≥–æ–¥—É, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥.
    """
    telegram_user_id = 777007
    city_name = "–ë–µ—Ä–ª–∏–Ω"
    default_frequency = "daily"

    # --- –®–∞–≥ 0: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–≥–æ–¥—É –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ ---
    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)
    existing_sub = Subscription(
        user_id=db_user.id,
        info_type=INFO_TYPE_WEATHER,
        frequency=default_frequency,
        details=city_name,  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥
        status="active"
    )
    integration_session.add(existing_sub)
    integration_session.commit()
    integration_session.refresh(existing_sub)

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç "–ü–æ–≥–æ–¥–∞" ---
    #   –®–∞–≥ 1.1: /subscribe
    mock_message_subscribe = AsyncMock(spec=Message)
    mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="WeatherDup User")
    mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_subscribe.answer = AsyncMock()

    mock_fsm_context_step1_1 = await get_mock_fsm_context()
    mock_fsm_context_step1_1.set_state = AsyncMock()

    mock_session_cm_s1_1 = MagicMock()
    mock_session_cm_s1_1.__enter__.return_value = integration_session
    mock_session_cm_s1_1.__exit__ = MagicMock(return_value=None)
    mock_generator_s1_1 = MagicMock()
    mock_generator_s1_1.__next__.return_value = mock_session_cm_s1_1

    with patch('app.bot.main.get_session', return_value=mock_generator_s1_1):
        await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_step1_1)
    mock_fsm_context_step1_1.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)

    #   –®–∞–≥ 1.2: –í—ã–±–æ—Ä "–ü–æ–≥–æ–¥–∞"
    mock_callback_query_weather = AsyncMock(spec=CallbackQuery)
    mock_callback_query_weather.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_callback_query_weather.data = f"subscribe_type:{INFO_TYPE_WEATHER}"
    mock_callback_query_weather.message = AsyncMock(spec=Message)
    mock_callback_query_weather.message.edit_text = AsyncMock()
    mock_callback_query_weather.answer = AsyncMock()

    mock_fsm_context_step1_2 = await get_mock_fsm_context(initial_state=SubscriptionStates.choosing_info_type)
    mock_fsm_context_step1_2.update_data = AsyncMock()
    mock_fsm_context_step1_2.set_state = AsyncMock()

    mock_session_cm_s1_2 = MagicMock()
    mock_session_cm_s1_2.__enter__.return_value = integration_session
    mock_session_cm_s1_2.__exit__ = MagicMock(return_value=None)
    mock_generator_s1_2 = MagicMock()
    mock_generator_s1_2.__next__.return_value = mock_session_cm_s1_2

    with patch('app.bot.main.get_session', return_value=mock_generator_s1_2):
        await process_info_type_choice(mock_callback_query_weather, mock_fsm_context_step1_2)
    mock_fsm_context_step1_2.set_state.assert_called_once_with(SubscriptionStates.entering_city_weather)
    mock_fsm_context_step1_2.update_data.assert_called_once_with(info_type=INFO_TYPE_WEATHER)

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥ ---
    mock_message_city_input = AsyncMock(spec=Message)
    mock_message_city_input.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_message_city_input.text = city_name  # –¢–æ—Ç –∂–µ –≥–æ—Ä–æ–¥, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
    mock_message_city_input.answer = AsyncMock()

    mock_fsm_context_step2 = await get_mock_fsm_context(
        initial_state=SubscriptionStates.entering_city_weather,
        initial_data={'info_type': INFO_TYPE_WEATHER}
    )
    mock_fsm_context_step2.clear = AsyncMock()

    mock_session_cm_s2 = MagicMock()
    mock_session_cm_s2.__enter__.return_value = integration_session
    mock_session_cm_s2.__exit__ = MagicMock(return_value=None)
    mock_generator_s2 = MagicMock()
    mock_generator_s2.__next__.return_value = mock_session_cm_s2

    with patch('app.bot.main.get_session', return_value=mock_generator_s2):
        await process_city_for_weather_subscription(mock_message_city_input, mock_fsm_context_step2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
    mock_message_city_input.answer.assert_called_once_with(
        f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '{INFO_TYPE_WEATHER}' –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_name)}'."
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ù–û–í–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞
    all_weather_subscriptions_for_city = integration_session.exec(
        select(Subscription).where(
            Subscription.user_id == db_user.id,
            Subscription.info_type == INFO_TYPE_WEATHER,
            Subscription.details == city_name,
            Subscription.status == "active"
        )
    ).all()
    assert len(
        all_weather_subscriptions_for_city) == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–≥–æ–¥—É –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞"
    assert all_weather_subscriptions_for_city[0].id == existing_sub.id

    mock_fsm_context_step2.clear.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞
    log_duplicate = integration_session.exec(
        select(Log)
        .where(Log.user_id == db_user.id)
        .where(Log.command == "subscribe_attempt_duplicate")
        .order_by(Log.timestamp.desc())
    ).first()
    assert log_duplicate is not None
    assert log_duplicate.details == f"Type: {INFO_TYPE_WEATHER}, City input: {city_name}"


@pytest.mark.asyncio
async def test_subscribe_to_events_already_subscribed_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ (slug).
    """
    telegram_user_id = 777008
    city_input = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"  # –ì–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    location_slug_details = KUDAGO_LOCATION_SLUGS[city_input.lower()]  # Slug –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    default_frequency = "daily"

    # --- –®–∞–≥ 0: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ location_slug ---
    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)
    existing_sub = Subscription(
        user_id=db_user.id,
        info_type=INFO_TYPE_EVENTS,
        frequency=default_frequency,
        details=location_slug_details,  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ç –∂–µ slug
        status="active"
    )
    integration_session.add(existing_sub)
    integration_session.commit()
    integration_session.refresh(existing_sub)

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç "–°–æ–±—ã—Ç–∏—è" ---
    #   –®–∞–≥ 1.1: /subscribe
    mock_message_subscribe = AsyncMock(spec=Message)
    mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="EventsDup User")
    mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_subscribe.answer = AsyncMock()

    mock_fsm_context_s1_1 = await get_mock_fsm_context()
    mock_fsm_context_s1_1.set_state = AsyncMock()

    mock_session_cm_s1_1 = MagicMock()
    mock_session_cm_s1_1.__enter__.return_value = integration_session
    mock_session_cm_s1_1.__exit__ = MagicMock(return_value=None)
    mock_generator_s1_1 = MagicMock()
    mock_generator_s1_1.__next__.return_value = mock_session_cm_s1_1

    with patch('app.bot.main.get_session', return_value=mock_generator_s1_1):
        await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_s1_1)
    mock_fsm_context_s1_1.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)

    #   –®–∞–≥ 1.2: –í—ã–±–æ—Ä "–°–æ–±—ã—Ç–∏—è"
    mock_callback_query_events = AsyncMock(spec=CallbackQuery)
    mock_callback_query_events.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_callback_query_events.data = f"subscribe_type:{INFO_TYPE_EVENTS}"
    mock_callback_query_events.message = AsyncMock(spec=Message)
    mock_callback_query_events.message.edit_text = AsyncMock()
    mock_callback_query_events.answer = AsyncMock()

    mock_fsm_context_s1_2 = await get_mock_fsm_context(initial_state=SubscriptionStates.choosing_info_type)
    mock_fsm_context_s1_2.update_data = AsyncMock()
    mock_fsm_context_s1_2.set_state = AsyncMock()

    mock_session_cm_s1_2 = MagicMock()
    mock_session_cm_s1_2.__enter__.return_value = integration_session
    mock_session_cm_s1_2.__exit__ = MagicMock(return_value=None)
    mock_generator_s1_2 = MagicMock()
    mock_generator_s1_2.__next__.return_value = mock_session_cm_s1_2

    with patch('app.bot.main.get_session', return_value=mock_generator_s1_2):
        await process_info_type_choice(mock_callback_query_events, mock_fsm_context_s1_2)
    mock_fsm_context_s1_2.set_state.assert_called_once_with(SubscriptionStates.entering_city_events)
    mock_fsm_context_s1_2.update_data.assert_called_once_with(info_type=INFO_TYPE_EVENTS)

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π slug'—É) ---
    mock_message_city_input = AsyncMock(spec=Message)
    mock_message_city_input.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_message_city_input.text = city_input  # –¢–æ—Ç –∂–µ –≥–æ—Ä–æ–¥
    mock_message_city_input.answer = AsyncMock()

    mock_fsm_context_s2 = await get_mock_fsm_context(
        initial_state=SubscriptionStates.entering_city_events,
        initial_data={'info_type': INFO_TYPE_EVENTS}
    )
    mock_fsm_context_s2.clear = AsyncMock()

    mock_session_cm_s2 = MagicMock()
    mock_session_cm_s2.__enter__.return_value = integration_session
    mock_session_cm_s2.__exit__ = MagicMock(return_value=None)
    mock_generator_s2 = MagicMock()
    mock_generator_s2.__next__.return_value = mock_session_cm_s2

    with patch('app.bot.main.get_session', return_value=mock_generator_s2):
        await process_city_for_events_subscription(mock_message_city_input, mock_fsm_context_s2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
    mock_message_city_input.answer.assert_called_once_with(
        f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '{INFO_TYPE_EVENTS}' –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_input)}'."
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ù–û–í–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞
    all_event_subscriptions_for_slug = integration_session.exec(
        select(Subscription).where(
            Subscription.user_id == db_user.id,
            Subscription.info_type == INFO_TYPE_EVENTS,
            Subscription.details == location_slug_details,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ slug'—É
            Subscription.status == "active"
        )
    ).all()
    assert len(
        all_event_subscriptions_for_slug) == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ slug"
    assert all_event_subscriptions_for_slug[0].id == existing_sub.id

    mock_fsm_context_s2.clear.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞
    log_duplicate = integration_session.exec(
        select(Log)
        .where(Log.user_id == db_user.id)
        .where(Log.command == "subscribe_attempt_duplicate")
        .order_by(Log.timestamp.desc())
    ).first()
    assert log_duplicate is not None
    assert log_duplicate.details == f"Type: {INFO_TYPE_EVENTS}, City input: {city_input}, slug: {location_slug_details}"


@pytest.mark.asyncio
async def test_subscribe_to_events_invalid_city_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≥–æ—Ä–æ–¥ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —Å–æ–±—ã—Ç–∏—è.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, FSM –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ entering_city_events.
    """
    telegram_user_id = 777009
    invalid_city_input = "–£—Ä—é–ø–∏–Ω—Å–∫"  # –ì–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ KUDAGO_LOCATION_SLUGS

    # --- –®–∞–≥ 0: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç "–°–æ–±—ã—Ç–∏—è" ---
    #   (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ç–µ—Å—Ç–∞–º, –¥–æ–≤–æ–¥–∏–º FSM –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è entering_city_events)
    #   –®–∞–≥ 1.1: /subscribe
    mock_message_subscribe = AsyncMock(spec=Message)
    mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="InvalidCity User")
    mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_subscribe.answer = AsyncMock()

    mock_fsm_context_s1_1 = await get_mock_fsm_context()
    mock_fsm_context_s1_1.set_state = AsyncMock()

    mock_session_cm_s1_1 = MagicMock()
    mock_session_cm_s1_1.__enter__.return_value = integration_session
    mock_session_cm_s1_1.__exit__ = MagicMock(return_value=None)
    mock_generator_s1_1 = MagicMock()
    mock_generator_s1_1.__next__.return_value = mock_session_cm_s1_1

    with patch('app.bot.main.get_session', return_value=mock_generator_s1_1):
        await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_s1_1)
    mock_fsm_context_s1_1.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)

    #   –®–∞–≥ 1.2: –í—ã–±–æ—Ä "–°–æ–±—ã—Ç–∏—è"
    mock_callback_query_events = AsyncMock(spec=CallbackQuery)
    mock_callback_query_events.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_callback_query_events.data = f"subscribe_type:{INFO_TYPE_EVENTS}"
    mock_callback_query_events.message = AsyncMock(spec=Message)
    mock_callback_query_events.message.edit_text = AsyncMock()
    mock_callback_query_events.answer = AsyncMock()

    mock_fsm_context_s1_2 = await get_mock_fsm_context(initial_state=SubscriptionStates.choosing_info_type)
    mock_fsm_context_s1_2.update_data = AsyncMock()
    mock_fsm_context_s1_2.set_state = AsyncMock()

    mock_session_cm_s1_2 = MagicMock()
    mock_session_cm_s1_2.__enter__.return_value = integration_session
    mock_session_cm_s1_2.__exit__ = MagicMock(return_value=None)
    mock_generator_s1_2 = MagicMock()
    mock_generator_s1_2.__next__.return_value = mock_session_cm_s1_2

    with patch('app.bot.main.get_session', return_value=mock_generator_s1_2):
        await process_info_type_choice(mock_callback_query_events, mock_fsm_context_s1_2)
    mock_fsm_context_s1_2.set_state.assert_called_once_with(SubscriptionStates.entering_city_events)

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≥–æ—Ä–æ–¥ ---
    mock_message_city_input = AsyncMock(spec=Message)
    mock_message_city_input.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_message_city_input.text = invalid_city_input
    mock_message_city_input.reply = AsyncMock()  # process_city_for_events_subscription –∏—Å–ø–æ–ª—å–∑—É–µ—Ç reply

    # FSMContext –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ entering_city_events
    # –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å info_type –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    mock_fsm_context_s2 = await get_mock_fsm_context(
        initial_state=SubscriptionStates.entering_city_events,
        initial_data={'info_type': INFO_TYPE_EVENTS}
    )
    mock_fsm_context_s2.clear = AsyncMock()  # –ú–æ–∫–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –ù–ï –±—ã–ª –≤—ã–∑–≤–∞–Ω
    # get_state –∏ set_state –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ process_city_for_events_subscription –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    mock_fsm_context_s2.get_state = AsyncMock()
    mock_fsm_context_s2.set_state = AsyncMock()

    mock_session_cm_s2 = MagicMock()
    mock_session_cm_s2.__enter__.return_value = integration_session
    mock_session_cm_s2.__exit__ = MagicMock(return_value=None)
    mock_generator_s2 = MagicMock()
    mock_generator_s2.__next__.return_value = mock_session_cm_s2

    with patch('app.bot.main.get_session', return_value=mock_generator_s2):
        await process_city_for_events_subscription(mock_message_city_input, mock_fsm_context_s2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
    mock_message_city_input.reply.assert_called_once_with(
        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –∑–Ω–∞—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(invalid_city_input)}'...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥..."
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞
    subscription_in_db = integration_session.exec(
        select(Subscription).where(
            Subscription.user_id == db_user.id,
            Subscription.info_type == INFO_TYPE_EVENTS
        )
    ).first()
    assert subscription_in_db is None, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ù–ï –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å)
    mock_fsm_context_s2.clear.assert_not_called()
    # –ò —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–ª–æ—Å—å
    mock_fsm_context_s2.set_state.assert_not_called()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞
    log_invalid_city = integration_session.exec(
        select(Log)
        .where(Log.user_id == db_user.id)
        .where(Log.command == "subscribe_city_unsupported")
        .order_by(Log.timestamp.desc())
    ).first()
    assert log_invalid_city is not None
    assert log_invalid_city.details == f"Type: {INFO_TYPE_EVENTS}, City input: {invalid_city_input}"


@pytest.mark.asyncio
async def test_subscribe_to_weather_empty_city_input_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –ø–æ–≥–æ–¥—É.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, FSM –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ entering_city_weather.
    """
    telegram_user_id = 777010
    empty_city_input = "   "  # –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã

    # --- –®–∞–≥ 0: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç "–ü–æ–≥–æ–¥–∞" ---
    #   (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ç–µ—Å—Ç–∞–º, –¥–æ–≤–æ–¥–∏–º FSM –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è entering_city_weather)
    #   –®–∞–≥ 1.1: /subscribe
    mock_message_subscribe = AsyncMock(spec=Message)
    mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="EmptyCity User")
    mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_subscribe.answer = AsyncMock()

    mock_fsm_context_s1_1 = await get_mock_fsm_context()
    mock_fsm_context_s1_1.set_state = AsyncMock()

    mock_session_cm_s1_1 = MagicMock()
    mock_session_cm_s1_1.__enter__.return_value = integration_session
    mock_session_cm_s1_1.__exit__ = MagicMock(return_value=None)
    mock_generator_s1_1 = MagicMock()
    mock_generator_s1_1.__next__.return_value = mock_session_cm_s1_1

    with patch('app.bot.main.get_session', return_value=mock_generator_s1_1):
        await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_s1_1)
    mock_fsm_context_s1_1.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)

    #   –®–∞–≥ 1.2: –í—ã–±–æ—Ä "–ü–æ–≥–æ–¥–∞"
    mock_callback_query_weather = AsyncMock(spec=CallbackQuery)
    mock_callback_query_weather.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_callback_query_weather.data = f"subscribe_type:{INFO_TYPE_WEATHER}"
    mock_callback_query_weather.message = AsyncMock(spec=Message)
    mock_callback_query_weather.message.edit_text = AsyncMock()
    mock_callback_query_weather.answer = AsyncMock()

    mock_fsm_context_s1_2 = await get_mock_fsm_context(initial_state=SubscriptionStates.choosing_info_type)
    mock_fsm_context_s1_2.update_data = AsyncMock()
    mock_fsm_context_s1_2.set_state = AsyncMock()

    mock_session_cm_s1_2 = MagicMock()
    mock_session_cm_s1_2.__enter__.return_value = integration_session
    mock_session_cm_s1_2.__exit__ = MagicMock(return_value=None)
    mock_generator_s1_2 = MagicMock()
    mock_generator_s1_2.__next__.return_value = mock_session_cm_s1_2

    with patch('app.bot.main.get_session', return_value=mock_generator_s1_2):
        await process_info_type_choice(mock_callback_query_weather, mock_fsm_context_s1_2)
    mock_fsm_context_s1_2.set_state.assert_called_once_with(SubscriptionStates.entering_city_weather)

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ---
    mock_message_city_input = AsyncMock(spec=Message)
    mock_message_city_input.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_message_city_input.text = empty_city_input  # –ü—É—Å—Ç–æ–π –≤–≤–æ–¥
    mock_message_city_input.reply = AsyncMock()  # process_city_for_weather_subscription –∏—Å–ø–æ–ª—å–∑—É–µ—Ç reply

    mock_fsm_context_s2 = await get_mock_fsm_context(
        initial_state=SubscriptionStates.entering_city_weather,
        initial_data={'info_type': INFO_TYPE_WEATHER}
    )
    mock_fsm_context_s2.clear = AsyncMock()
    mock_fsm_context_s2.set_state = AsyncMock()

    mock_session_cm_s2 = MagicMock()
    mock_session_cm_s2.__enter__.return_value = integration_session
    mock_session_cm_s2.__exit__ = MagicMock(return_value=None)
    mock_generator_s2 = MagicMock()
    mock_generator_s2.__next__.return_value = mock_session_cm_s2

    with patch('app.bot.main.get_session', return_value=mock_generator_s2):
        await process_city_for_weather_subscription(mock_message_city_input, mock_fsm_context_s2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
    mock_message_city_input.reply.assert_called_once_with(
        "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º..."
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞
    subscription_in_db = integration_session.exec(
        select(Subscription).where(
            Subscription.user_id == db_user.id,
            Subscription.info_type == INFO_TYPE_WEATHER
        )
    ).first()
    assert subscription_in_db is None, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–≥–æ–¥—É –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –≤–≤–æ–¥–µ –≥–æ—Ä–æ–¥–∞"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ù–ï –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ –∏ –ù–ï –º–µ–Ω—è–ª–æ—Å—å
    mock_fsm_context_s2.clear.assert_not_called()
    mock_fsm_context_s2.set_state.assert_not_called()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞
    log_empty_city = integration_session.exec(
        select(Log)
        .where(Log.user_id == db_user.id)
        .where(Log.command == "subscribe_city_empty")
        .order_by(Log.timestamp.desc())
    ).first()
    assert log_empty_city is not None
    assert log_empty_city.details == f"Type: {INFO_TYPE_WEATHER}"


@pytest.mark.asyncio
async def test_cancel_subscription_at_type_choice_by_command(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /cancel –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    telegram_user_id = 777011

    # --- –®–∞–≥ 0: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscribe ---
    mock_message_subscribe = AsyncMock(spec=Message)
    mock_message_subscribe.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="CancelAtType User")
    mock_message_subscribe.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_subscribe.answer = AsyncMock()

    mock_fsm_context_step1 = await get_mock_fsm_context()
    mock_fsm_context_step1.set_state = AsyncMock()  # –ú–æ–∫–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞

    mock_session_cm_step1 = MagicMock()
    mock_session_cm_step1.__enter__.return_value = integration_session
    mock_session_cm_step1.__exit__ = MagicMock(return_value=None)
    mock_generator_step1 = MagicMock()
    mock_generator_step1.__next__.return_value = mock_session_cm_step1

    with patch('app.bot.main.get_session', return_value=mock_generator_step1):
        await process_subscribe_command_start(mock_message_subscribe, mock_fsm_context_step1)

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 1
    mock_message_subscribe.answer.assert_called_once()
    mock_fsm_context_step1.set_state.assert_called_once_with(SubscriptionStates.choosing_info_type)

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel ---
    mock_message_cancel = AsyncMock(spec=Message)
    mock_message_cancel.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id)
    mock_message_cancel.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message_cancel.answer = AsyncMock()

    # FSMContext –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_info_type
    mock_fsm_context_step2 = await get_mock_fsm_context(initial_state=SubscriptionStates.choosing_info_type)
    # –ú–æ–∫–∏—Ä—É–µ–º get_state, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è cmd_cancel_any_state
    mock_fsm_context_step2.get_state = AsyncMock(return_value=SubscriptionStates.choosing_info_type.state)
    mock_fsm_context_step2.clear = AsyncMock()  # –ú–æ–∫–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—Å—Ç–∫–∏

    mock_direct_context_manager_step2 = MagicMock()
    mock_direct_context_manager_step2.__enter__.return_value = integration_session  # –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—à—É —Å–µ—Å—Å–∏—é
    mock_direct_context_manager_step2.__exit__ = MagicMock(return_value=None)  # __exit__ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–æ–∫–æ–º

    # –ü–∞—Ç—á–∏–º get_session, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    with patch('app.bot.main.get_session', return_value=mock_direct_context_manager_step2):
        await cmd_cancel_any_state(mock_message_cancel, mock_fsm_context_step2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –®–∞–≥–∞ 2
    mock_message_cancel.answer.assert_called_once_with(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    mock_fsm_context_step2.clear.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞ –¥–ª—è —à–∞–≥–∞ 2 (–æ—Ç–º–µ–Ω–∞)
    log_step2_cancel = integration_session.exec(
        select(Log)
        .where(Log.user_id == db_user.id)
        .where(Log.command == "/cancel")
        .order_by(Log.timestamp.desc())
    ).first()
    assert log_step2_cancel is not None
    assert log_step2_cancel.details == f"State before cancel: {SubscriptionStates.choosing_info_type.state}"