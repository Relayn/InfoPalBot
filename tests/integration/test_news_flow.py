import pytest # pytest –æ—Å—Ç–∞–µ—Ç—Å—è
import httpx
import html
from unittest.mock import AsyncMock, MagicMock, patch, ANY

from sqlmodel import Session, select # Session –∏ select –æ—Å—Ç–∞—é—Ç—Å—è

from app.bot.main import process_news_command
from app.config import settings as app_settings
from app.database.models import Log, User as DBUser
from app.database.crud import create_user
from aiogram.types import Message, User as AiogramUser, Chat

@pytest.mark.asyncio
async def test_news_command_successful_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /news.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: –±–æ—Ç -> API –∫–ª–∏–µ–Ω—Ç -> –º–æ–∫ API -> –ë–î –ª–æ–≥.
    """
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    telegram_user_id = 23456
    api_key = "fake_news_key_success"

    mock_message = AsyncMock(spec=Message)
    mock_message.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="News User")
    mock_message.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message.reply = AsyncMock()
    mock_message.answer = AsyncMock()

    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    mock_api_response_data = {
        "status": "ok",
        "totalResults": 2,
        "articles": [
            {"title": "–ù–æ–≤–æ—Å—Ç—å 1 <script>alert(0)</script>", "url": "http://example.com/news1", "source": {"name": "–ò—Å—Ç–æ—á–Ω–∏–∫ 1"}},
            {"title": "–ù–æ–≤–æ—Å—Ç—å 2", "url": "http://example.com/news2", "source": {"name": "–ò—Å—Ç–æ—á–Ω–∏–∫ 2"}},
        ]
    }

    # 2. –ü–∞—Ç—á–∏–Ω–≥
    mock_httpx_response = MagicMock(spec=httpx.Response)
    mock_httpx_response.status_code = 200
    mock_httpx_response.json.return_value = mock_api_response_data
    # –î–ª—è NewsAPI raise_for_status –Ω–µ –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, —Ç.–∫. –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ JSON
    # –ù–æ –ª—É—á—à–µ –µ–≥–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π HTTP error

    original_news_key = app_settings.NEWS_API_KEY
    app_settings.NEWS_API_KEY = api_key

    mock_session_context_manager = MagicMock()
    mock_session_context_manager.__enter__.return_value = integration_session
    mock_session_context_manager.__exit__ = MagicMock(return_value=None)
    mock_generator = MagicMock()
    mock_generator.__next__.return_value = mock_session_context_manager

    with patch('app.api_clients.news.httpx.AsyncClient') as MockAsyncNewsClient, \
         patch('app.bot.main.get_session', return_value=mock_generator):

        mock_news_client_instance = AsyncMock()
        mock_news_client_instance.get.return_value = mock_httpx_response
        MockAsyncNewsClient.return_value.__aenter__.return_value = mock_news_client_instance

        # 3. –í—ã–∑–æ–≤
        await process_news_command(mock_message)

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_message.reply.assert_called_once_with("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ NewsAPI –∫–ª–∏–µ–Ω—Ç–∞ (—ç–Ω–¥–ø–æ–∏–Ω—Ç /top-headlines)
    expected_news_api_url = "https://newsapi.org/v2/top-headlines"
    expected_news_api_params = {"country": "ru", "pageSize": 5, "apiKey": api_key}
    mock_news_client_instance.get.assert_called_once_with(expected_news_api_url, params=expected_news_api_params)

    expected_lines = ["<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è):</b>"]
    title1_escaped = html.escape("–ù–æ–≤–æ—Å—Ç—å 1 <script>alert(0)</script>")
    expected_lines.append(f"1. <a href='http://example.com/news1'>{title1_escaped}</a> (–ò—Å—Ç–æ—á–Ω–∏–∫ 1)")
    expected_lines.append("2. <a href='http://example.com/news2'>–ù–æ–≤–æ—Å—Ç—å 2</a> (–ò—Å—Ç–æ—á–Ω–∏–∫ 2)")
    expected_text = "\n".join(expected_lines)
    mock_message.answer.assert_called_once_with(expected_text, disable_web_page_preview=True)

    log_entry = integration_session.exec(
        select(Log).where(Log.command == "/news").where(Log.user_id == db_user.id)
    ).first()
    assert log_entry is not None
    assert log_entry.details == "success"

    app_settings.NEWS_API_KEY = original_news_key


@pytest.mark.asyncio
async def test_news_command_api_error_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /news, API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É.
    """
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    telegram_user_id = 34567
    api_key = "fake_news_key_error"

    mock_message = AsyncMock(spec=Message)
    mock_message.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="Error News User")
    mock_message.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message.reply = AsyncMock()
    mock_message.answer = AsyncMock()

    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    # –û—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è –≤ JSON –æ—Ç NewsAPI
    error_message_from_api = "Your API key is invalid or incorrect."
    mock_api_error_response_data = {
        "status": "error",
        "code": "apiKeyInvalid",
        "message": error_message_from_api
    }

    # 2. –ü–∞—Ç—á–∏–Ω–≥
    mock_httpx_response = MagicMock(spec=httpx.Response)
    mock_httpx_response.status_code = 200 # NewsAPI –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 200 OK, –Ω–æ —Å –æ—à–∏–±–∫–æ–π –≤ JSON
    mock_httpx_response.json.return_value = mock_api_error_response_data

    original_news_key = app_settings.NEWS_API_KEY
    app_settings.NEWS_API_KEY = api_key

    mock_session_context_manager = MagicMock()
    mock_session_context_manager.__enter__.return_value = integration_session
    mock_session_context_manager.__exit__ = MagicMock(return_value=None)
    mock_generator = MagicMock()
    mock_generator.__next__.return_value = mock_session_context_manager

    with patch('app.api_clients.news.httpx.AsyncClient') as MockAsyncNewsClient, \
         patch('app.bot.main.get_session', return_value=mock_generator):

        mock_news_client_instance = AsyncMock()
        mock_news_client_instance.get.return_value = mock_httpx_response
        MockAsyncNewsClient.return_value.__aenter__.return_value = mock_news_client_instance

        # 3. –í—ã–∑–æ–≤
        await process_news_command(mock_message)

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_message.reply.assert_any_call("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
    mock_message.reply.assert_any_call(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {html.escape(error_message_from_api)}")
    mock_message.answer.assert_not_called()

    log_entry = integration_session.exec(
        select(Log).where(Log.command == "/news").where(Log.user_id == db_user.id)
    ).first()
    assert log_entry is not None
    assert log_entry.details == f"api_error: {error_message_from_api[:100]}"

    app_settings.NEWS_API_KEY = original_news_key


@pytest.mark.asyncio
async def test_news_command_no_articles_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /news, API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "ok", –Ω–æ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π.
    """
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    telegram_user_id = 45678
    api_key = "fake_news_key_no_articles"

    mock_message = AsyncMock(spec=Message)
    mock_message.from_user = MagicMock(spec=AiogramUser, id=telegram_user_id, full_name="No News User")
    mock_message.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message.reply = AsyncMock()
    mock_message.answer = AsyncMock()

    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    mock_api_response_data = {
        "status": "ok",
        "totalResults": 0,
        "articles": [] # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
    }

    # 2. –ü–∞—Ç—á–∏–Ω–≥
    mock_httpx_response = MagicMock(spec=httpx.Response)
    mock_httpx_response.status_code = 200
    mock_httpx_response.json.return_value = mock_api_response_data

    original_news_key = app_settings.NEWS_API_KEY
    app_settings.NEWS_API_KEY = api_key

    mock_session_context_manager = MagicMock()
    mock_session_context_manager.__enter__.return_value = integration_session
    mock_session_context_manager.__exit__ = MagicMock(return_value=None)
    mock_generator = MagicMock()
    mock_generator.__next__.return_value = mock_session_context_manager

    with patch('app.api_clients.news.httpx.AsyncClient') as MockAsyncNewsClient, \
         patch('app.bot.main.get_session', return_value=mock_generator):

        mock_news_client_instance = AsyncMock()
        mock_news_client_instance.get.return_value = mock_httpx_response
        MockAsyncNewsClient.return_value.__aenter__.return_value = mock_news_client_instance

        # 3. –í—ã–∑–æ–≤
        await process_news_command(mock_message)

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_message.reply.assert_any_call("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
    mock_message.reply.assert_any_call("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    mock_message.answer.assert_not_called() # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è reply –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è "–Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"

    log_entry = integration_session.exec(
        select(Log).where(Log.command == "/news").where(Log.user_id == db_user.id)
    ).first()
    assert log_entry is not None
    assert log_entry.details == "no_articles_found"

    app_settings.NEWS_API_KEY = original_news_key