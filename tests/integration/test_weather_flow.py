import pytest  # pytest –æ—Å—Ç–∞–µ—Ç—Å—è
import httpx
import html
from unittest.mock import AsyncMock, MagicMock, patch, ANY

from sqlmodel import Session, select

from app.bot.main import process_weather_command
from app.config import settings as app_settings
from app.database.models import Log, User as DBUser
from app.database.crud import create_user
from aiogram.types import Message, User as AiogramUser, Chat
from aiogram.filters import CommandObject


@pytest.mark.asyncio
async def test_weather_command_successful_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /weather.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: –±–æ—Ç -> API –∫–ª–∏–µ–Ω—Ç -> –º–æ–∫ API -> –ë–î –ª–æ–≥.
    """
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    city_name = "–ú–æ—Å–∫–≤–∞"
    telegram_user_id = 12345
    api_key = "fake_weather_key_success"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞

    # –ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mock_message = AsyncMock(spec=Message)
    mock_message.from_user = MagicMock(
        spec=AiogramUser, id=telegram_user_id, full_name="Test User"
    )
    mock_message.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message.reply = AsyncMock()
    mock_message.answer = AsyncMock()

    # –ú–æ–∫ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    mock_command_obj = MagicMock(spec=CommandObject, args=city_name)

    # –°–æ–∑–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –¥–ª—è —Ç–µ—Å—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    # –ú–æ–∫ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ø–æ–≥–æ–¥—ã
    mock_api_response_data = {
        "weather": [{"description": "—è—Å–Ω–æ"}],
        "main": {"temp": 25.0, "feels_like": 24.0, "humidity": 60},
        "wind": {"speed": 5.0, "deg": 90},  # deg 90 = –í–æ—Å—Ç–æ—á–Ω—ã–π
        "name": "Moscow",
    }

    # 2. –ü–∞—Ç—á–∏–Ω–≥
    mock_httpx_response = MagicMock(spec=httpx.Response)
    mock_httpx_response.status_code = 200
    mock_httpx_response.json.return_value = mock_api_response_data
    mock_httpx_response.raise_for_status = MagicMock()

    original_weather_key = app_settings.WEATHER_API_KEY
    app_settings.WEATHER_API_KEY = api_key

    mock_session_context_manager = MagicMock()
    mock_session_context_manager.__enter__.return_value = integration_session
    mock_session_context_manager.__exit__.return_value = None

    with patch(
        "app.api_clients.weather.httpx.AsyncClient"
    ) as MockAsyncWeatherClient, patch(
        "app.bot.main.get_session", return_value=mock_session_context_manager
    ):
        mock_weather_client_instance = AsyncMock()
        mock_weather_client_instance.get.return_value = mock_httpx_response
        MockAsyncWeatherClient.return_value.__aenter__.return_value = (
            mock_weather_client_instance
        )

        # 3. –í—ã–∑–æ–≤ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã)
        await process_weather_command(mock_message, mock_command_obj)

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_message.reply.assert_any_call(
        f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name)}</b>..."
    )

    expected_weather_api_url = "https://api.openweathermap.org/data/2.5/weather"
    expected_weather_api_params = {
        "q": city_name,
        "appid": api_key,
        "units": "metric",
        "lang": "ru",
    }
    mock_weather_client_instance.get.assert_called_once_with(
        expected_weather_api_url, params=expected_weather_api_params
    )

    expected_response_text = (
        f"<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {html.escape(mock_api_response_data['name'])}:</b>\n"
        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {mock_api_response_data['main']['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {mock_api_response_data['main']['feels_like']}¬∞C)\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {mock_api_response_data['main']['humidity']}%\n"
        f"üí® –í–µ—Ç–µ—Ä: {mock_api_response_data['wind']['speed']} –º/—Å, –í–æ—Å—Ç–æ—á–Ω—ã–π\n"
        f"‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: –Ø—Å–Ω–æ"
    )
    mock_message.answer.assert_called_once_with(expected_response_text)

    log_entry = integration_session.exec(
        select(Log).where(Log.command == "/weather").where(Log.user_id == db_user.id)
    ).first()
    assert log_entry is not None
    assert log_entry.details == f"–≥–æ—Ä–æ–¥: {city_name}, —É—Å–ø–µ—Ö"

    app_settings.WEATHER_API_KEY = original_weather_key


@pytest.mark.asyncio
async def test_weather_command_city_not_found_flow(integration_session: Session):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /weather, –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω API.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: –±–æ—Ç -> API –∫–ª–∏–µ–Ω—Ç -> –º–æ–∫ API (–æ—à–∏–±–∫–∞) -> –ë–î –ª–æ–≥.
    """
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    city_name = "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–ì–æ—Ä–æ–¥"
    telegram_user_id = 54321
    api_key = "fake_weather_key_error"

    mock_message = AsyncMock(spec=Message)
    mock_message.from_user = MagicMock(
        spec=AiogramUser, id=telegram_user_id, full_name="Error User"
    )
    mock_message.chat = MagicMock(spec=Chat, id=telegram_user_id)
    mock_message.reply = AsyncMock()
    mock_message.answer = AsyncMock()

    mock_command_obj = MagicMock(spec=CommandObject, args=city_name)

    db_user = create_user(session=integration_session, telegram_id=telegram_user_id)

    mock_api_error_response_data = {"cod": "404", "message": "city not found"}

    # 2. –ü–∞—Ç—á–∏–Ω–≥
    mock_httpx_response = MagicMock(spec=httpx.Response)
    mock_httpx_response.status_code = 404
    mock_httpx_response.json.return_value = mock_api_error_response_data
    mock_httpx_response.text = '{"cod": "404", "message": "city not found"}'
    mock_httpx_response.raise_for_status.side_effect = httpx.HTTPStatusError(
        message="Not Found", request=MagicMock(), response=mock_httpx_response
    )

    original_weather_key = app_settings.WEATHER_API_KEY
    app_settings.WEATHER_API_KEY = api_key

    mock_session_context_manager = MagicMock()
    mock_session_context_manager.__enter__.return_value = integration_session
    mock_session_context_manager.__exit__.return_value = None

    with patch(
        "app.api_clients.weather.httpx.AsyncClient"
    ) as MockAsyncWeatherClient, patch(
        "app.bot.main.get_session", return_value=mock_session_context_manager
    ):
        mock_weather_client_instance = AsyncMock()
        mock_weather_client_instance.get.return_value = mock_httpx_response
        MockAsyncWeatherClient.return_value.__aenter__.return_value = (
            mock_weather_client_instance
        )

        # 3. –í—ã–∑–æ–≤
        await process_weather_command(mock_message, mock_command_obj)

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_message.reply.assert_any_call(
        f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name)}</b>..."
    )

    expected_weather_api_url = "https://api.openweathermap.org/data/2.5/weather"
    expected_weather_api_params = {
        "q": city_name,
        "appid": api_key,
        "units": "metric",
        "lang": "ru",
    }
    mock_weather_client_instance.get.assert_called_once_with(
        expected_weather_api_url, params=expected_weather_api_params
    )

    mock_message.reply.assert_any_call(
        f"–ì–æ—Ä–æ–¥ <b>{html.escape(city_name)}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω..."
    )
    mock_message.answer.assert_not_called()

    log_entry = integration_session.exec(
        select(Log).where(Log.command == "/weather").where(Log.user_id == db_user.id)
    ).first()
    assert log_entry is not None
    assert log_entry.details == f"–≥–æ—Ä–æ–¥: {city_name}, –æ—à–∏–±–∫–∞ API: city not found"

    app_settings.WEATHER_API_KEY = original_weather_key
