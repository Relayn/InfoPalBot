# –§–∞–π–ª: tests/unit/test_scheduler_tasks.py

import pytest
import html
from unittest.mock import AsyncMock, MagicMock, patch, ANY
from aiogram import Bot
from aiogram.exceptions import TelegramAPIError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from app.scheduler.tasks import (
    send_single_notification,
    format_weather_message,
    format_news_message,
    format_events_message,
)
from app.database.models import Subscription, User
from app.bot.constants import INFO_TYPE_WEATHER, INFO_TYPE_NEWS, KUDAGO_LOCATION_SLUGS


# --- –ù–û–í–´–ï –¢–ï–°–¢–´ –î–õ–Ø –§–£–ù–ö–¶–ò–ô –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ---

@pytest.mark.asyncio
@patch("app.scheduler.tasks.get_weather_data")
async def test_format_weather_message_success(mock_get_weather):
    """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ."""
    city = "–õ–æ–Ω–¥–æ–Ω"
    mock_get_weather.return_value = {
        "weather": [{"description": "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"}],
        "main": {"temp": 15.5, "feels_like": 14.0},
        "name": "London",
    }
    result = await format_weather_message(city)
    assert result is not None
    assert "<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ London:</b>" in result
    assert "15.5¬∞C" in result
    assert "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å" in result
    mock_get_weather.assert_awaited_once_with(city)


@pytest.mark.asyncio
@patch("app.scheduler.tasks.get_weather_data")
async def test_format_weather_message_api_error(mock_get_weather):
    """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç API."""
    city = "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–ì–æ—Ä–æ–¥"
    mock_get_weather.return_value = {"error": True, "message": "city not found"}
    result = await format_weather_message(city)
    assert result is None
    mock_get_weather.assert_awaited_once_with(city)


@pytest.mark.asyncio
@patch("app.scheduler.tasks.get_top_headlines")
async def test_format_news_message_success(mock_get_news):
    """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö."""
    mock_get_news.return_value = [
        {"title": "–ù–æ–≤–æ—Å—Ç—å 1", "url": "http://a.com"},
        {"title": "–ù–æ–≤–æ—Å—Ç—å 2", "url": "http://b.com"},
    ]
    result = await format_news_message()
    assert result is not None
    assert "<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–°–®–ê):</b>" in result
    assert "<a href='http://a.com'>–ù–æ–≤–æ—Å—Ç—å 1</a>" in result
    assert "<a href='http://b.com'>–ù–æ–≤–æ—Å—Ç—å 2</a>" in result
    mock_get_news.assert_awaited_once_with(page_size=5)


@pytest.mark.asyncio
@patch("app.scheduler.tasks.get_top_headlines")
async def test_format_news_message_no_articles(mock_get_news):
    """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—Ç–∞—Ç–µ–π."""
    mock_get_news.return_value = []  # API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    result = await format_news_message()
    assert result is None
    mock_get_news.assert_awaited_once_with(page_size=5)


@pytest.mark.asyncio
@patch("app.scheduler.tasks.get_kudago_events")
async def test_format_events_message_success(mock_get_events):
    """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö."""
    location_slug = "msk"
    mock_get_events.return_value = [
        {"title": "–ö–æ–Ω—Ü–µ—Ä—Ç", "site_url": "http://kudago.com/msk/concert/1"},
    ]
    result = await format_events_message(location_slug)
    city_name = "–ú–æ—Å–∫–≤–∞"  # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ slug 'msk' –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ '–ú–æ—Å–∫–≤–∞'
    assert result is not None
    assert f"<b>üéâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {city_name}:</b>" in result
    assert "<a href='http://kudago.com/msk/concert/1'>–ö–æ–Ω—Ü–µ—Ä—Ç</a>" in result
    mock_get_events.assert_awaited_once_with(location=location_slug, page_size=3)


@pytest.mark.asyncio
@patch("app.scheduler.tasks.get_kudago_events")
async def test_format_events_message_api_error(mock_get_events):
    """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç API."""
    location_slug = "spb"
    mock_get_events.return_value = None  # API –≤–µ—Ä–Ω—É–ª–æ None
    result = await format_events_message(location_slug)
    assert result is None
    mock_get_events.assert_awaited_once_with(location=location_slug, page_size=3)


# --- –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –¢–ï–°–¢–´ –î–õ–Ø send_single_notification ---


@pytest.mark.asyncio
async def test_send_single_notification_success_weather():
    """
    –¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ.
    """
    mock_bot = AsyncMock(spec=Bot)
    mock_bot.send_message = AsyncMock()

    user = User(id=1, telegram_id=12345)
    subscription = Subscription(
        id=10,
        user_id=1,
        info_type=INFO_TYPE_WEATHER,
        frequency=3,
        details="Moscow",
        status="active",
        user=user,
    )

    mock_session = MagicMock()
    mock_session.get.return_value = subscription

    formatted_message = "<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ Moscow:</b>..."

    with patch(
        "app.scheduler.tasks.get_session",
        return_value=MagicMock(__enter__=MagicMock(return_value=mock_session)),
    ), patch(
        "app.scheduler.tasks.format_weather_message", return_value=formatted_message
    ) as mock_format:
        await send_single_notification(mock_bot, subscription_id=10)

        mock_format.assert_called_once_with("Moscow")
        mock_bot.send_message.assert_called_once_with(
            chat_id=12345, text=formatted_message, disable_web_page_preview=True
        )


@pytest.mark.asyncio
async def test_send_single_notification_subscription_not_found():
    mock_bot = AsyncMock(spec=Bot)
    mock_bot.send_message = AsyncMock()

    mock_session = MagicMock()
    mock_session.get.return_value = None

    with patch(
        "app.scheduler.tasks.get_session",
        return_value=MagicMock(__enter__=MagicMock(return_value=mock_session)),
    ), patch("app.scheduler.tasks.logger.warning") as mock_logger:
        await send_single_notification(mock_bot, subscription_id=999)

        mock_logger.assert_called_once_with(
            "–ü–æ–¥–ø–∏—Å–∫–∞ ID 999 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞."
        )
        mock_bot.send_message.assert_not_called()


@pytest.mark.asyncio
async def test_send_single_notification_format_message_fails():
    mock_bot = AsyncMock(spec=Bot)
    mock_bot.send_message = AsyncMock()

    user = User(id=1, telegram_id=12345)
    subscription = Subscription(
        id=11,
        user_id=1,
        info_type=INFO_TYPE_NEWS,
        frequency=6,
        status="active",
        user=user,
    )

    mock_session = MagicMock()
    mock_session.get.return_value = subscription

    with patch(
        "app.scheduler.tasks.get_session",
        return_value=MagicMock(__enter__=MagicMock(return_value=mock_session)),
    ), patch(
        "app.scheduler.tasks.format_news_message", return_value=None
    ) as mock_format, patch(
        "app.scheduler.tasks.logger.warning"
    ) as mock_logger:
        await send_single_notification(mock_bot, subscription_id=11)

        mock_format.assert_called_once()
        mock_logger.assert_called_once_with(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID 11. –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏."
        )
        mock_bot.send_message.assert_not_called()


@pytest.mark.asyncio
async def test_send_single_notification_bot_blocked():
    """
    –¢–µ—Å—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è.
    """
    mock_bot = AsyncMock(spec=Bot)
    mock_bot.send_message.side_effect = TelegramAPIError(
        method="sendMessage", message="bot was blocked by the user"
    )

    user = User(id=1, telegram_id=12345)
    sub1 = Subscription(
        id=12, user_id=1, info_type=INFO_TYPE_NEWS, frequency=6, status="active", user=user
    )
    sub2 = Subscription(
        id=13,
        user_id=1,
        info_type=INFO_TYPE_WEATHER,
        details="Kyiv",
        frequency=3,
        status="active",
        user=user,
    )

    mock_session = MagicMock()
    mock_session.get.return_value = sub1
    mock_session.exec.return_value.all.return_value = [sub1, sub2]

    formatted_message = "<b>–ù–æ–≤–æ—Å—Ç–∏...</b>"

    with patch(
        "app.scheduler.tasks.get_session",
        return_value=MagicMock(__enter__=MagicMock(return_value=mock_session)),
    ), patch(
        "app.scheduler.tasks.format_news_message", return_value=formatted_message
    ), patch(
        "app.scheduler.tasks.delete_subscription"
    ) as mock_delete_subscription, patch(
        "app.scheduler.tasks.logger.warning"
    ) as mock_logger:
        await send_single_notification(mock_bot, subscription_id=12)

        mock_bot.send_message.assert_called_once()
        assert mock_delete_subscription.call_count == 2
        mock_delete_subscription.assert_any_call(ANY, 12)
        mock_delete_subscription.assert_any_call(ANY, 13)
        mock_logger.assert_any_call(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 12345 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏."
        )