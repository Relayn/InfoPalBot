import pytest
import html
from unittest.mock import AsyncMock, MagicMock, patch

from app.bot.handlers.basic import (
    process_start_command,
    process_help_command,
    cmd_cancel_any_state,
)
from app.database.models import User as DBUser
from aiogram.types import Message, User as AiogramUser, Chat, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from app.bot.fsm import SubscriptionStates

# --- –¢–µ—Å—Ç—ã –¥–ª—è process_start_command ---

@pytest.mark.asyncio
async def test_process_start_command_new_user():
    """
    –¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=12345, full_name="Test User")
    mock_state = AsyncMock(spec=FSMContext)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –¥–ª—è patch
    with patch("app.bot.handlers.basic.get_session"), patch(
        "app.bot.handlers.basic.create_user_if_not_exists"
    ) as mock_create_user, patch(
        "app.bot.handlers.basic.log_user_action"
    ) as mock_log_action:
        await process_start_command(mock_message, mock_state)

        mock_state.clear.assert_called_once()
        mock_create_user.assert_called_once()
        mock_log_action.assert_called_once()
        expected_reply_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {mock_message.from_user.full_name}! –Ø InfoPalBot. "
            f"–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        mock_message.answer.assert_called_once_with(expected_reply_text)


# --- –¢–µ—Å—Ç—ã –¥–ª—è process_help_command ---


@pytest.mark.asyncio
async def test_process_help_command():
    """
    –¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /help.
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=11223)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –¥–ª—è patch
    with patch("app.bot.handlers.basic.get_session"), patch(
        "app.bot.handlers.basic.log_user_action"
    ), patch("app.bot.handlers.basic.logger") as mock_logger:
        await process_help_command(mock_message)

        expected_help_text = (
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/profile - üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "/weather <code>[–≥–æ—Ä–æ–¥]</code> - ‚òÄÔ∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
            "/news - üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–°–®–ê)\n"
            "/events <code>[–≥–æ—Ä–æ–¥]</code> - üéâ –°–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:</b>\n"
            "/subscribe - üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "/mysubscriptions - üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "/unsubscribe - üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "/cancel - ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
            "/help - ‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        )
        mock_message.answer.assert_called_once_with(expected_help_text)
        mock_logger.info.assert_called_with(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {mock_message.from_user.id}"
        )


# --- –¢–µ—Å—Ç—ã –¥–ª—è cmd_cancel_any_state ---


@pytest.mark.asyncio
async def test_cmd_cancel_any_state_with_state():
    """–¢–µ—Å—Ç: /cancel –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.from_user = MagicMock(id=123)
    mock_state = AsyncMock(spec=FSMContext)
    mock_state.get_state.return_value = SubscriptionStates.choosing_frequency.state

    with patch("app.bot.handlers.basic.get_session"), patch(
        "app.bot.handlers.basic.log_user_action"
    ):
        await cmd_cancel_any_state(mock_message, mock_state)

        mock_state.clear.assert_called_once()
        mock_message.answer.assert_called_once_with(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
        )


@pytest.mark.asyncio
async def test_cmd_cancel_any_state_no_state():
    """–¢–µ—Å—Ç: /cancel –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.from_user = MagicMock(id=123)
    mock_state = AsyncMock(spec=FSMContext)
    mock_state.get_state.return_value = None  # –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è

    with patch("app.bot.handlers.basic.get_session"), patch(
        "app.bot.handlers.basic.log_user_action"
    ):
        await cmd_cancel_any_state(mock_message, mock_state)

        mock_state.clear.assert_not_called()  # –û—á–∏—Å—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
        mock_message.answer.assert_called_once_with(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove()
        )