import pytest
import html
from unittest.mock import AsyncMock, MagicMock, patch

from app.bot.main import (
    process_weather_command,
    process_news_command,
    process_events_command
)
from aiogram.types import Message, User as AiogramUser, Chat
from aiogram.filters import CommandObject

# --- –¢–µ—Å—Ç—ã –¥–ª—è process_weather_command ---

@pytest.mark.asyncio
async def test_process_weather_command_success():
    city_name = "–ú–æ—Å–∫–≤–∞"
    mock_message = AsyncMock(spec=Message); mock_message.answer = AsyncMock(); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123, full_name="Tester")
    mock_command = MagicMock(spec=CommandObject, args=city_name)
    mock_weather_api_response = {
        "weather": [{"description": "—è—Å–Ω–æ"}],
        "main": {"temp": 20.5, "feels_like": 19.0, "humidity": 50},
        "wind": {"speed": 3.0, "deg": 180}, "name": "–ú–æ—Å–∫–≤–∞"
    }
    with patch('app.bot.main.get_weather_data', return_value=mock_weather_api_response) as mock_get_weather:
        await process_weather_command(mock_message, mock_command)
        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name)}</b>...")
        mock_get_weather.assert_called_once_with(city_name.strip())
        expected_response_text = (
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {html.escape(mock_weather_api_response.get('name', city_name))}:</b>\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {mock_weather_api_response['main']['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {mock_weather_api_response['main']['feels_like']}¬∞C)\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {mock_weather_api_response['main']['humidity']}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {mock_weather_api_response['wind']['speed']} –º/—Å, –Æ–∂–Ω—ã–π\n"
            f"‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: –Ø—Å–Ω–æ"
        )
        mock_message.answer.assert_called_once_with(expected_response_text)

@pytest.mark.asyncio
async def test_process_weather_command_no_city():
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_command = MagicMock(spec=CommandObject, args=None)
    await process_weather_command(mock_message, mock_command)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –±–æ—Ç–∞
    mock_message.reply.assert_called_once_with("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞...")


@pytest.mark.asyncio
async def test_process_weather_command_city_not_found():
    city_name = "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–ì–æ—Ä–æ–¥"
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_command = MagicMock(spec=CommandObject, args=city_name)
    mock_weather_api_error_response = {"error": True, "status_code": 404, "message": "city not found"}
    with patch('app.bot.main.get_weather_data', return_value=mock_weather_api_error_response):
        await process_weather_command(mock_message, mock_command)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤—ã–∑–æ–≤–∞ reply
        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name)}</b>...")
        mock_message.reply.assert_any_call(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É: {html.escape(mock_weather_api_error_response.get('message', '–û—à–∏–±–∫–∞'))}")


@pytest.mark.asyncio
async def test_process_weather_command_api_key_error():
    city_name = "–ú–æ—Å–∫–≤–∞"
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_command = MagicMock(spec=CommandObject, args=city_name)
    mock_weather_api_error_response = {"error": True, "status_code": 401, "message": "Invalid API key"}
    with patch('app.bot.main.get_weather_data', return_value=mock_weather_api_error_response):
        await process_weather_command(mock_message, mock_command)
        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name)}</b>...")
        mock_message.reply.assert_any_call(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É: {html.escape(mock_weather_api_error_response.get('message', '–û—à–∏–±–∫–∞'))}")


@pytest.mark.asyncio
async def test_process_weather_command_api_other_error():
    city_name = "–ú–æ—Å–∫–≤–∞"
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_command = MagicMock(spec=CommandObject, args=city_name)
    error_message_from_api = "Some other API error"
    mock_weather_api_error_response = {"error": True, "status_code": 500, "message": error_message_from_api}
    with patch('app.bot.main.get_weather_data', return_value=mock_weather_api_error_response):
        await process_weather_command(mock_message, mock_command)
        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name)}</b>...")
        mock_message.reply.assert_any_call(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É: {html.escape(error_message_from_api)}")

@pytest.mark.asyncio
async def test_process_weather_command_parsing_key_error():
    city_name = "–ú–æ—Å–∫–≤–∞"
    mock_message = AsyncMock(spec=Message); mock_message.answer = AsyncMock(); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123, full_name="Tester")
    mock_command = MagicMock(spec=CommandObject, args=city_name)
    malformed_weather_api_response = {"weather": [{"description": "—è—Å–Ω–æ"}], "wind": {"speed": 3.0, "deg": 180}, "name": "–ú–æ—Å–∫–≤–∞"}
    with patch('app.bot.main.get_weather_data', return_value=malformed_weather_api_response):
        await process_weather_command(mock_message, mock_command)
        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name)}</b>...")
        mock_message.answer.assert_called_once_with("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")


# --- –¢–µ—Å—Ç—ã –¥–ª—è process_news_command ---
@pytest.mark.asyncio
async def test_process_news_command_success():
    mock_message = AsyncMock(spec=Message); mock_message.answer = AsyncMock(); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_articles = [
        {'title': '–ù–æ–≤–æ—Å—Ç—å 1 <script>alert(1)</script>', 'url': 'http://example.com/1', 'source': {'name': '–ò—Å—Ç–æ—á–Ω–∏–∫ 1'}},
        {'title': '–ù–æ–≤–æ—Å—Ç—å 2', 'url': 'http://example.com/2', 'source': {'name': '–ò—Å—Ç–æ—á–Ω–∏–∫ 2'}},
    ]
    with patch('app.bot.main.get_top_headlines', return_value=mock_articles):
        await process_news_command(mock_message)
        mock_message.reply.assert_called_once_with("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
        expected_lines = ["<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è):</b>"]
        title1_escaped = html.escape("–ù–æ–≤–æ—Å—Ç—å 1 <script>alert(1)</script>")
        expected_lines.append(f"1. <a href='http://example.com/1'>{title1_escaped}</a> (–ò—Å—Ç–æ—á–Ω–∏–∫ 1)")
        expected_lines.append("2. <a href='http://example.com/2'>–ù–æ–≤–æ—Å—Ç—å 2</a> (–ò—Å—Ç–æ—á–Ω–∏–∫ 2)")
        expected_text = "\n".join(expected_lines)
        mock_message.answer.assert_called_once_with(expected_text, disable_web_page_preview=True)

@pytest.mark.asyncio
async def test_process_news_command_no_articles():
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    with patch('app.bot.main.get_top_headlines', return_value=[]):
        await process_news_command(mock_message)
        mock_message.reply.assert_any_call("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
        mock_message.reply.assert_any_call("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")


@pytest.mark.asyncio
async def test_process_news_command_api_error():
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    error_message_from_api = "API key invalid"
    mock_api_error_response = {"error": True, "code": "apiKeyInvalid", "message": error_message_from_api, "source": "NewsAPI/HTTP"}
    with patch('app.bot.main.get_top_headlines', return_value=mock_api_error_response):
        await process_news_command(mock_message)
        mock_message.reply.assert_any_call("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
        mock_message.reply.assert_any_call(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {html.escape(error_message_from_api)}")

@pytest.mark.asyncio
async def test_process_news_command_unexpected_return():
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    with patch('app.bot.main.get_top_headlines', return_value=None):
        await process_news_command(mock_message)
        mock_message.reply.assert_any_call("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
        mock_message.reply.assert_any_call("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö...")


# --- –¢–µ—Å—Ç—ã –¥–ª—è process_events_command ---
@pytest.mark.asyncio
async def test_process_events_command_success():
    city_arg = "–ú–æ—Å–∫–≤–∞"; location_slug = "msk"
    mock_message = AsyncMock(spec=Message); mock_message.answer = AsyncMock(); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=456)
    mock_command = MagicMock(spec=CommandObject, args=city_arg)
    mock_events = [
        {'id': 1, 'title': '–°–æ–±—ã—Ç–∏–µ 1 <–¢–µ—Å—Ç HTML>', 'description': '–û–ø–∏—Å–∞–Ω–∏–µ 1 <p>—Å —Ç–µ–≥–æ–º</p>', 'site_url': 'http://site.com/1'},
        {'id': 2, 'title': '–°–æ–±—ã—Ç–∏–µ 2', 'description': '–û–ø–∏—Å–∞–Ω–∏–µ 2', 'site_url': 'http://site.com/2'},
    ]
    with patch('app.bot.main.get_kudago_events', return_value=mock_events):
        await process_events_command(mock_message, mock_command)
        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg)}</b>...")
        expected_lines = [f"<b>üéâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {html.escape(city_arg.capitalize())}:</b>"]
        title1_escaped = html.escape('–°–æ–±—ã—Ç–∏–µ 1 <–¢–µ—Å—Ç HTML>')
        desc1_escaped = html.escape("–û–ø–∏—Å–∞–Ω–∏–µ 1 —Å —Ç–µ–≥–æ–º".strip())
        expected_lines.append(f"1. <a href='http://site.com/1'>{title1_escaped}</a>\n   <i>{desc1_escaped}</i>")
        title2_escaped = html.escape('–°–æ–±—ã—Ç–∏–µ 2')
        desc2_escaped = html.escape("–û–ø–∏—Å–∞–Ω–∏–µ 2".strip())
        expected_lines.append(f"2. <a href='http://site.com/2'>{title2_escaped}</a>\n   <i>{desc2_escaped}</i>")
        expected_text = "\n\n".join(expected_lines)
        mock_message.answer.assert_called_once_with(expected_text, disable_web_page_preview=True)

@pytest.mark.asyncio
async def test_process_events_command_no_city_arg():
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=456)
    mock_command = MagicMock(spec=CommandObject, args=None)
    await process_events_command(mock_message, mock_command)
    mock_message.reply.assert_called_once_with("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥...\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥...")


@pytest.mark.asyncio
async def test_process_events_command_unknown_city():
    city_arg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ì–æ—Ä–æ–¥"
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=456)
    mock_command = MagicMock(spec=CommandObject, args=city_arg)
    await process_events_command(mock_message, mock_command)
    mock_message.reply.assert_called_once_with(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –∑–Ω–∞—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{html.escape(city_arg)}'...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥...")

@pytest.mark.asyncio
async def test_process_events_command_no_events_found():
    city_arg = "—Å–ø–±"; location_slug = "spb"
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=456)
    mock_command = MagicMock(spec=CommandObject, args=city_arg)
    with patch('app.bot.main.get_kudago_events', return_value=[]):
        await process_events_command(mock_message, mock_command)
        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg)}</b>...")
        mock_message.reply.assert_any_call(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg)}</b>.")

@pytest.mark.asyncio
async def test_process_events_command_api_error():
    city_arg = "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"; location_slug = "ekb"
    mock_message = AsyncMock(spec=Message); mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=456)
    mock_command = MagicMock(spec=CommandObject, args=city_arg)
    error_message_from_api = "Some API error"
    mock_api_error_response = {"error": True, "message": error_message_from_api, "source": "KudaGo HTTP"}
    with patch('app.bot.main.get_kudago_events', return_value=mock_api_error_response):
        await process_events_command(mock_message, mock_command)
        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg)}</b>...")
        mock_message.reply.assert_any_call(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è: {html.escape(error_message_from_api)}")