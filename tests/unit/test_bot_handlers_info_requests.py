import pytest
import html
from unittest.mock import AsyncMock, MagicMock, patch, ANY

from app.bot.handlers.info_requests import (
    process_weather_command,
    process_news_command,
    process_events_command,
)
from aiogram.types import Message, User as AiogramUser, Chat
from aiogram.filters import CommandObject

# ... —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–≥–æ–¥—ã ...
@pytest.mark.asyncio
async def test_process_weather_command_success():
    city_name = "–ú–æ—Å–∫–≤–∞"
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123, full_name="Tester")
    mock_command = MagicMock(spec=CommandObject, args=city_name)
    mock_weather_api_response = {
        "weather": [{"description": "—è—Å–Ω–æ"}],
        "main": {"temp": 20.5, "feels_like": 19.0, "humidity": 50},
        "wind": {"speed": 3.0, "deg": 180},
        "name": city_name,
    }
    with patch(
        "app.bot.handlers.info_requests.get_weather_data",
        return_value=mock_weather_api_response,
    ), patch("app.bot.handlers.info_requests.get_session"), patch(
        "app.bot.handlers.info_requests.log_user_action"
    ) as mock_log_action:
        await process_weather_command(mock_message, mock_command)
        mock_message.reply.assert_any_call(
            f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_name)}</b>..."
        )
        expected_response_text = (
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {html.escape(mock_weather_api_response.get('name', city_name))}:</b>\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {mock_weather_api_response['main']['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {mock_weather_api_response['main']['feels_like']}¬∞C)\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {mock_weather_api_response['main']['humidity']}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {mock_weather_api_response['wind']['speed']} –º/—Å, –Æ–∂–Ω—ã–π\n"
            f"‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: –Ø—Å–Ω–æ"
        )
        mock_message.answer.assert_called_once_with(expected_response_text)
        mock_log_action.assert_called_once_with(
            ANY, mock_message.from_user.id, "/weather", f"–≥–æ—Ä–æ–¥: {city_name}, —É—Å–ø–µ—Ö"
        )


@pytest.mark.asyncio
async def test_process_weather_command_no_city():
    mock_message = AsyncMock(spec=Message)
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_command = MagicMock(spec=CommandObject, args=None)
    with patch("app.bot.handlers.info_requests.get_session"), patch(
        "app.bot.handlers.info_requests.log_user_action"
    ) as mock_log_action:
        await process_weather_command(mock_message, mock_command)
        mock_message.reply.assert_called_once_with(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞..."
        )
        mock_log_action.assert_called_once_with(
            ANY, mock_message.from_user.id, "/weather", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"
        )


# --- –¢–µ—Å—Ç—ã –¥–ª—è process_news_command ---
@pytest.mark.asyncio
async def test_process_news_command_success():
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_articles = [
        {"title": "–ù–æ–≤–æ—Å—Ç—å 1", "url": "http://example.com/1", "source": {"name": "–ò—Å—Ç–æ—á–Ω–∏–∫ 1"}},
    ]
    with patch(
        "app.bot.handlers.info_requests.get_top_headlines", return_value=mock_articles
    ), patch("app.bot.handlers.info_requests.get_session"), patch(
        "app.bot.handlers.info_requests.log_user_action"
    ) as mock_log_action:
        await process_news_command(mock_message)
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Ç–µ–∫—Å—Ç ---
        mock_message.reply.assert_called_once_with(
            "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –°–®–ê..."
        )
        expected_text = (
            "<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–°–®–ê):</b>\n"
            "1. <a href='http://example.com/1'>–ù–æ–≤–æ—Å—Ç—å 1</a> (–ò—Å—Ç–æ—á–Ω–∏–∫ 1)"
        )
        mock_message.answer.assert_called_once_with(
            expected_text, disable_web_page_preview=True
        )
        mock_log_action.assert_called_once_with(
            ANY, mock_message.from_user.id, "/news", "success, country=us"
        )

# ... —Ç–µ—Å—Ç—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π ...
@pytest.mark.asyncio
async def test_process_events_command_success():
    city_arg = "–ú–æ—Å–∫–≤–∞"
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=456)
    mock_command = MagicMock(spec=CommandObject, args=city_arg)
    mock_events = [
        {"title": "–°–æ–±—ã—Ç–∏–µ 1", "description": "–û–ø–∏—Å–∞–Ω–∏–µ 1", "site_url": "http://site.com/1"},
    ]
    with patch(
        "app.bot.handlers.info_requests.get_kudago_events", return_value=mock_events
    ), patch("app.bot.handlers.info_requests.get_session"), patch(
        "app.bot.handlers.info_requests.log_user_action"
    ) as mock_log_action:
        await process_events_command(mock_message, mock_command)
        mock_message.reply.assert_any_call(
            f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{html.escape(city_arg)}</b>..."
        )
        mock_log_action.assert_called_once_with(
            ANY, mock_message.from_user.id, "/events", f"–≥–æ—Ä–æ–¥: {city_arg}, —É—Å–ø–µ—Ö"
        )