import pytest
import html # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º httpx –¥–ª—è escape
from unittest.mock import AsyncMock, MagicMock, patch

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from app.bot.main import (
    process_start_command,
    process_help_command,
    process_weather_command,
    process_news_command
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å User –∏–∑ –ë–î –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
from app.database.models import User as DBUser
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã aiogram –∏ CommandObject
from aiogram.types import Message, User as AiogramUser, Chat
from aiogram.filters import CommandObject
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Settings –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
from app.config import Settings

# --- –¢–µ—Å—Ç—ã –¥–ª—è process_start_command ---

@pytest.mark.asyncio
async def test_process_start_command_new_user():
    """
    –¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–∂–∏–¥–∞–µ—Ç—Å—è:
    - –í—ã–∑–æ–≤ create_user_if_not_exists.
    - –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser)
    mock_message.from_user.id = 12345
    mock_message.from_user.full_name = "Test User"
    mock_message.chat = MagicMock(spec=Chat)
    mock_message.chat.id = 12345

    mock_db_user = DBUser(id=1, telegram_id=12345)

    with patch('app.bot.main.get_session') as mock_get_session, \
         patch('app.bot.main.create_user_if_not_exists', return_value=mock_db_user) as mock_create_user:

        mock_session_context_manager = MagicMock()
        mock_session = MagicMock()
        mock_session_context_manager.__enter__.return_value = mock_session
        mock_get_session.return_value.__next__.return_value = mock_session_context_manager

        await process_start_command(mock_message)

        mock_create_user.assert_called_once_with(session=mock_session, telegram_id=12345)
        expected_reply_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {mock_message.from_user.full_name}! –Ø InfoPalBot. "
            f"–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        mock_message.answer.assert_called_once_with(expected_reply_text)


@pytest.mark.asyncio
async def test_process_start_command_existing_user():
    """
    –¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–∂–∏–¥–∞–µ—Ç—Å—è:
    - –í—ã–∑–æ–≤ create_user_if_not_exists (–∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    - –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser)
    mock_message.from_user.id = 54321
    mock_message.from_user.full_name = "Existing User"
    mock_message.chat = MagicMock(spec=Chat)
    mock_message.chat.id = 54321

    mock_db_user = DBUser(id=2, telegram_id=54321)

    with patch('app.bot.main.get_session') as mock_get_session, \
         patch('app.bot.main.create_user_if_not_exists', return_value=mock_db_user) as mock_create_user:

        mock_session_context_manager = MagicMock()
        mock_session = MagicMock()
        mock_session_context_manager.__enter__.return_value = mock_session
        mock_get_session.return_value.__next__.return_value = mock_session_context_manager

        await process_start_command(mock_message)

        mock_create_user.assert_called_once_with(session=mock_session, telegram_id=54321)
        expected_reply_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {mock_message.from_user.full_name}! –Ø InfoPalBot. "
            f"–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        mock_message.answer.assert_called_once_with(expected_reply_text)


@pytest.mark.asyncio
async def test_process_start_command_db_error():
    """
    –¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /start —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î.
    –û–∂–∏–¥–∞–µ—Ç—Å—è:
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏.
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser)
    mock_message.from_user.id = 67890
    mock_message.from_user.full_name = "Error User"
    mock_message.chat = MagicMock(spec=Chat)
    mock_message.chat.id = 67890

    db_exception = Exception("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –ë–î")

    with patch('app.bot.main.get_session') as mock_get_session, \
         patch('app.bot.main.create_user_if_not_exists', side_effect=db_exception) as mock_create_user, \
         patch('app.bot.main.logger.error') as mock_logger_error:

        mock_session_context_manager = MagicMock()
        mock_session = MagicMock()
        mock_session_context_manager.__enter__.return_value = mock_session
        mock_get_session.return_value.__next__.return_value = mock_session_context_manager

        await process_start_command(mock_message)

        mock_create_user.assert_called_once_with(session=mock_session, telegram_id=67890)
        mock_message.answer.assert_called_once_with("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        mock_logger_error.assert_called_once()
        args, kwargs = mock_logger_error.call_args
        assert f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mock_message.from_user.id}: {db_exception}" in args[0]
        assert kwargs.get('exc_info') is True


# --- –¢–µ—Å—Ç—ã –¥–ª—è process_help_command ---

@pytest.mark.asyncio
async def test_process_help_command():
    """
    –¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /help.
    –û–∂–∏–¥–∞–µ—Ç—Å—è:
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–ø—Ä–∞–≤–∫–∏.
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser)
    mock_message.from_user.id = 11223

    with patch('app.bot.main.logger.info') as mock_logger_info:
        await process_help_command(mock_message)

        expected_help_text = (
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "<code>/start</code> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
            "<code>/help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π\n"
            "<code>/weather [–≥–æ—Ä–æ–¥]</code> - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>/weather –ú–æ—Å–∫–≤–∞</code>)\n"
            "<code>/news</code> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è)\n" # –£—Ç–æ—á–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞–∫ –≤ –∫–æ–¥–µ –±–æ—Ç–∞
            "<code>/events</code> - –£–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
            "\n"
            "<b>–ü–æ–¥–ø–∏—Å–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):</b>\n"
            "<code>/subscribe</code> - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "<code>/unsubscribe</code> - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>/mysubscriptions</code> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        )
        mock_message.answer.assert_called_once_with(expected_help_text)
        mock_logger_info.assert_called_with(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {mock_message.from_user.id}")


# --- –¢–µ—Å—Ç—ã –¥–ª—è process_weather_command ---

@pytest.mark.asyncio
async def test_process_weather_command_success():
    """
    –¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ /weather.
    """
    city_name = "–ú–æ—Å–∫–≤–∞"
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123, full_name="Tester")
    mock_command = MagicMock(spec=CommandObject, args=city_name)

    mock_weather_api_response = {
        "weather": [{"description": "—è—Å–Ω–æ"}],
        "main": {"temp": 20.5, "feels_like": 19.0, "humidity": 50},
        "wind": {"speed": 3.0, "deg": 180},
        "name": "–ú–æ—Å–∫–≤–∞"
    }

    with patch('app.bot.main.get_weather_data', return_value=mock_weather_api_response) as mock_get_weather, \
         patch('app.bot.main.logger') as mock_logger:

        await process_weather_command(mock_message, mock_command)

        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{city_name}</b>...")
        mock_get_weather.assert_called_once_with(city_name.strip())

        expected_response_text = (
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {mock_weather_api_response.get('name', city_name)}:</b>\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {mock_weather_api_response['main']['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {mock_weather_api_response['main']['feels_like']}¬∞C)\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {mock_weather_api_response['main']['humidity']}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {mock_weather_api_response['wind']['speed']} –º/—Å, –Æ–∂–Ω—ã–π\n"
            f"‚òÄÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: –Ø—Å–Ω–æ"
        )
        mock_message.answer.assert_called_once_with(expected_response_text)
        mock_logger.info.assert_any_call(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mock_message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")
        mock_logger.info.assert_any_call(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {mock_message.from_user.id}.")


@pytest.mark.asyncio
async def test_process_weather_command_no_city():
    """
    –¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /weather –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_command = MagicMock(spec=CommandObject, args=None)

    with patch('app.bot.main.logger.info') as mock_logger_info:
        await process_weather_command(mock_message, mock_command)

        mock_message.reply.assert_called_once_with(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /weather.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/weather –ú–æ—Å–∫–≤–∞</code>"
        )
        mock_logger_info.assert_called_once_with(f"–ö–æ–º–∞–Ω–¥–∞ /weather –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {mock_message.from_user.id}.")


@pytest.mark.asyncio
async def test_process_weather_command_city_not_found():
    """
    –¢–µ—Å—Ç: API –ø–æ–≥–æ–¥—ã –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É "–≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" (404).
    """
    city_name = "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–ì–æ—Ä–æ–¥"
    mock_message = AsyncMock(spec=Message)
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_command = MagicMock(spec=CommandObject, args=city_name)

    mock_weather_api_error_response = {"error": True, "status_code": 404, "message": "city not found"}

    with patch('app.bot.main.get_weather_data', return_value=mock_weather_api_error_response) as mock_get_weather, \
         patch('app.bot.main.logger') as mock_logger:

        await process_weather_command(mock_message, mock_command)

        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{city_name}</b>...")
        mock_get_weather.assert_called_once_with(city_name.strip())
        mock_message.reply.assert_any_call(f"–ì–æ—Ä–æ–¥ <b>{city_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        mock_logger.warning.assert_called_once()


@pytest.mark.asyncio
async def test_process_weather_command_api_key_error():
    """
    –¢–µ—Å—Ç: API –ø–æ–≥–æ–¥—ã –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É "–Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á" (401).
    """
    city_name = "–ú–æ—Å–∫–≤–∞"
    mock_message = AsyncMock(spec=Message)
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_command = MagicMock(spec=CommandObject, args=city_name)

    mock_weather_api_error_response = {"error": True, "status_code": 401, "message": "Invalid API key"}

    with patch('app.bot.main.get_weather_data', return_value=mock_weather_api_error_response) as mock_get_weather, \
         patch('app.bot.main.logger') as mock_logger:

        await process_weather_command(mock_message, mock_command)

        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{city_name}</b>...")
        mock_get_weather.assert_called_once_with(city_name.strip())
        mock_message.reply.assert_any_call("–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã (–Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á). –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        mock_logger.critical.assert_called_once()


@pytest.mark.asyncio
async def test_process_weather_command_api_other_error():
    """
    –¢–µ—Å—Ç: API –ø–æ–≥–æ–¥—ã –≤–µ—Ä–Ω—É–ª–æ –¥—Ä—É–≥—É—é –æ—à–∏–±–∫—É.
    """
    city_name = "–ú–æ—Å–∫–≤–∞"
    mock_message = AsyncMock(spec=Message)
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)
    mock_command = MagicMock(spec=CommandObject, args=city_name)

    error_message_from_api = "Some other API error"
    mock_weather_api_error_response = {"error": True, "status_code": 500, "message": error_message_from_api}

    with patch('app.bot.main.get_weather_data', return_value=mock_weather_api_error_response) as mock_get_weather, \
         patch('app.bot.main.logger') as mock_logger:

        await process_weather_command(mock_message, mock_command)

        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{city_name}</b>...")
        mock_get_weather.assert_called_once_with(city_name.strip())
        mock_message.reply.assert_any_call(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É: {error_message_from_api}")
        mock_logger.warning.assert_called_once()


@pytest.mark.asyncio
async def test_process_weather_command_parsing_key_error():
    """
    –¢–µ—Å—Ç: –æ—à–∏–±–∫–∞ KeyError –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.
    """
    city_name = "–ú–æ—Å–∫–≤–∞"
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123, full_name="Tester")
    mock_command = MagicMock(spec=CommandObject, args=city_name)

    malformed_weather_api_response = {
        "weather": [{"description": "—è—Å–Ω–æ"}],
        "wind": {"speed": 3.0, "deg": 180},
        "name": "–ú–æ—Å–∫–≤–∞"
    }

    with patch('app.bot.main.get_weather_data', return_value=malformed_weather_api_response) as mock_get_weather, \
         patch('app.bot.main.logger') as mock_logger:

        await process_weather_command(mock_message, mock_command)

        mock_message.reply.assert_any_call(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{city_name}</b>...")
        mock_get_weather.assert_called_once_with(city_name.strip())
        mock_message.answer.assert_called_once_with("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
        mock_logger.error.assert_called_once()
        args, kwargs = mock_logger.error.call_args
        assert "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ" in args[0]
        assert "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á" in args[0]
        assert "'main'" in args[0] # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω –∫–ª—é—á 'main'

# --- –¢–µ—Å—Ç—ã –¥–ª—è process_news_command ---

@pytest.mark.asyncio
async def test_process_news_command_success():
    """
    –¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–æ–º–∞–Ω–¥–µ /news.
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)

    mock_articles = [
        {'title': '–ù–æ–≤–æ—Å—Ç—å 1 <script>alert(1)</script>', 'url': 'http://example.com/1', 'source': {'name': '–ò—Å—Ç–æ—á–Ω–∏–∫ 1'}},
        {'title': '–ù–æ–≤–æ—Å—Ç—å 2', 'url': 'http://example.com/2', 'source': {'name': '–ò—Å—Ç–æ—á–Ω–∏–∫ 2'}},
    ]

    with patch('app.bot.main.get_top_headlines', return_value=mock_articles) as mock_get_news, \
         patch('app.bot.main.logger') as mock_logger:

        await process_news_command(mock_message)

        mock_message.reply.assert_called_once_with("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
        mock_get_news.assert_called_once_with(country="ru", page_size=5)

        expected_lines = ["<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–†–æ—Å—Å–∏—è):</b>"]
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º html.escape –∑–¥–µ—Å—å —Ç–æ–∂–µ
        title1_escaped = html.escape("–ù–æ–≤–æ—Å—Ç—å 1 <script>alert(1)</script>") # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        expected_lines.append(f"1. <a href='http://example.com/1'>{title1_escaped}</a> (–ò—Å—Ç–æ—á–Ω–∏–∫ 1)")
        expected_lines.append("2. <a href='http://example.com/2'>–ù–æ–≤–æ—Å—Ç—å 2</a> (–ò—Å—Ç–æ—á–Ω–∏–∫ 2)")
        expected_text = "\n".join(expected_lines)

        mock_message.answer.assert_called_once_with(expected_text, disable_web_page_preview=True)
        mock_logger.info.assert_any_call(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mock_message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ—Å—Ç–∏.")
        mock_logger.info.assert_any_call(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {mock_message.from_user.id}.")


@pytest.mark.asyncio
async def test_process_news_command_no_articles():
    """
    –¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /news, API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π.
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)

    mock_articles = []

    with patch('app.bot.main.get_top_headlines', return_value=mock_articles) as mock_get_news, \
         patch('app.bot.main.logger') as mock_logger:

        await process_news_command(mock_message)

        mock_message.reply.assert_any_call("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
        mock_get_news.assert_called_once_with(country="ru", page_size=5)
        mock_message.reply.assert_any_call("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        mock_logger.info.assert_any_call(f"–ì–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –†–æ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mock_message.from_user.id}).")


@pytest.mark.asyncio
async def test_process_news_command_api_error():
    """
    –¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /news, API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)

    error_message_from_api = "API key invalid"
    mock_api_error_response = {"error": True, "code": "apiKeyInvalid", "message": error_message_from_api, "source": "NewsAPI/HTTP"}

    with patch('app.bot.main.get_top_headlines', return_value=mock_api_error_response) as mock_get_news, \
         patch('app.bot.main.logger') as mock_logger:

        await process_news_command(mock_message)

        mock_message.reply.assert_any_call("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
        mock_get_news.assert_called_once_with(country="ru", page_size=5)
        mock_message.reply.assert_any_call(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {error_message_from_api}")
        mock_logger.warning.assert_called_once()


@pytest.mark.asyncio
async def test_process_news_command_unexpected_return():
    """
    –¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /news, API –∫–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–µ —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å —Å –æ—à–∏–±–∫–æ–π).
    """
    mock_message = AsyncMock(spec=Message)
    mock_message.reply = AsyncMock()
    mock_message.from_user = MagicMock(spec=AiogramUser, id=123)

    unexpected_response = None

    with patch('app.bot.main.get_top_headlines', return_value=unexpected_response) as mock_get_news, \
         patch('app.bot.main.logger') as mock_logger:

        await process_news_command(mock_message)

        mock_message.reply.assert_any_call("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏...")
        mock_get_news.assert_called_once_with(country="ru", page_size=5)
        mock_message.reply.assert_any_call("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        mock_logger.error.assert_called_once()